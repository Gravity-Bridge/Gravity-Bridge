on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Automated release build

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and upload release assets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13
        id: go

      - name: Checkout code
        uses: actions/checkout@v2
        
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: orchestrator/

      - name: Set ENV var for GOPATH
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV

      # build the code before creating the release, GO and Solidity first for faster failures
      - name: Build Gravity Bridge Blockchain
        run: |
          cd module
          make build-reproducible

      - name: Build Gravity.sol
        run: cd solidity && npm ci && npm run typechain

      - name: Build Gravity Bridge tools
        run: |
          cargo install cross
          cd orchestrator
          cross build --target x86_64-unknown-linux-musl --release

      # now that the code has built create the release and start uploading
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Gravity Bridge Tools
        id: upload-gbt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./orchestrator/target/x86_64-unknown-linux-musl/release/gbt
          asset_name: gbt
          asset_content_type: application/bin

      - name: Upload Gravity Bridge Build Report
        id: upload-gravity-bridge-build-report
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./module/artifacts/build_report
          asset_name: build_report
          asset_content_type: text
 
      # the file names are hard to predict, so we rename them
      - name: Rename build files
        run: |
          pushd ./module/artifacts/
          cp *linux-amd64 gravity-linux-amd64
          popd

      - name: Upload Gravity Bridge Linux
        id: upload-gravity-bridge-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./module/artifacts/gravity-linux-amd64
          asset_name: gravity-linux-amd64
          asset_content_type: application/bin

      # next we upload the contract artifact, in a production situation a previous version will
      # already be deployed on Ethereum and this won't be very useful, but as any chain leads up
      # to launch it's nice to have a version history for the contract itself and see what if any
      # changes are made that may go unnoticed due to tooling
      - name: Upload Gravity Ethereum artifacts
        id: upload-solidity-artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: solidity/artifacts/contracts/Gravity.sol/Gravity.json
          asset_name: Gravity.json
          asset_content_type: application/bin

      # finally we start arm builds and uploads, we do this because the release
      # entry is already made and rust builds take nearly 10 minutes, so instead
      # of having a workable release in 20 minutes we can have one in 10 with the ARM
      # binaries coming 10 minutes later.
      - name: Build GBT ARM64
        run: |
          cd orchestrator
          cross build --target aarch64-unknown-linux-musl --release

      - name: Upload Gravity Bridge Tools ARM
        id: upload-gbt-arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./orchestrator/target/aarch64-unknown-linux-musl/release/gbt
          asset_name: gbt-arm
          asset_content_type: application/bin

      - name: Build GBT Windows
        run: |
          cd orchestrator
          cross build --target x86_64-pc-windows-gnu --release

      - name: Upload Gravity Bridge Tools Windows
        id: upload-gbt-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./orchestrator/target/x86_64-pc-windows-gnu/release/gbt.exe
          asset_name: gbt.exe
          asset_content_type: application/bin

      - name: Build GBT Mac
        run: |
          sudo apt install \
                clang \
                gcc \
                g++ \
                zlib1g-dev \
                libmpc-dev \
                libmpfr-dev \
                libgmp-dev \
                libssl-dev \
                xz-utils \
                libxml2-dev
          rustup target add x86_64-apple-darwin
          pushd /tmp/
          git clone https://github.com/tpoechtrager/osxcross
          cd osxcross
          wget -nc https://s3.dockerproject.org/darwin/v2/MacOSX10.10.sdk.tar.xz
          mv MacOSX10.10.sdk.tar.xz tarballs/
          UNATTENDED=yes OSX_VERSION_MIN=10.7 ./build.sh
          popd
          cd orchestrator
          PATH="/tmp/osxcross/target/bin:$PATH" \
          CC=o64-clang \
          CXX=o64-clang++ \
          LIBZ_SYS_STATIC=1 \
          cargo build --target x86_64-apple-darwin --release

      - name: Upload Gravity Bridge Tools Mac
        id: upload-gbt-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./orchestrator/target/x86_64-apple-darwin/release/gbt
          asset_name: gbt-mac-amd64
          asset_content_type: application/bin
