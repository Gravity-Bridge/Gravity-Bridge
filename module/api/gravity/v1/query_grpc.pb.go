// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gravity/v1/query.proto

package gravityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                         = "/gravity.v1.Query/Params"
	Query_CurrentValset_FullMethodName                  = "/gravity.v1.Query/CurrentValset"
	Query_ValsetRequest_FullMethodName                  = "/gravity.v1.Query/ValsetRequest"
	Query_ValsetConfirm_FullMethodName                  = "/gravity.v1.Query/ValsetConfirm"
	Query_ValsetConfirmsByNonce_FullMethodName          = "/gravity.v1.Query/ValsetConfirmsByNonce"
	Query_LastValsetRequests_FullMethodName             = "/gravity.v1.Query/LastValsetRequests"
	Query_LastPendingValsetRequestByAddr_FullMethodName = "/gravity.v1.Query/LastPendingValsetRequestByAddr"
	Query_LastPendingBatchRequestByAddr_FullMethodName  = "/gravity.v1.Query/LastPendingBatchRequestByAddr"
	Query_LastPendingLogicCallByAddr_FullMethodName     = "/gravity.v1.Query/LastPendingLogicCallByAddr"
	Query_LastEventNonceByAddr_FullMethodName           = "/gravity.v1.Query/LastEventNonceByAddr"
	Query_BatchFees_FullMethodName                      = "/gravity.v1.Query/BatchFees"
	Query_OutgoingTxBatches_FullMethodName              = "/gravity.v1.Query/OutgoingTxBatches"
	Query_OutgoingLogicCalls_FullMethodName             = "/gravity.v1.Query/OutgoingLogicCalls"
	Query_BatchRequestByNonce_FullMethodName            = "/gravity.v1.Query/BatchRequestByNonce"
	Query_BatchConfirms_FullMethodName                  = "/gravity.v1.Query/BatchConfirms"
	Query_LogicConfirms_FullMethodName                  = "/gravity.v1.Query/LogicConfirms"
	Query_ERC20ToDenom_FullMethodName                   = "/gravity.v1.Query/ERC20ToDenom"
	Query_DenomToERC20_FullMethodName                   = "/gravity.v1.Query/DenomToERC20"
	Query_GetLastObservedEthBlock_FullMethodName        = "/gravity.v1.Query/GetLastObservedEthBlock"
	Query_GetLastObservedEthNonce_FullMethodName        = "/gravity.v1.Query/GetLastObservedEthNonce"
	Query_GetAttestations_FullMethodName                = "/gravity.v1.Query/GetAttestations"
	Query_GetDelegateKeyByValidator_FullMethodName      = "/gravity.v1.Query/GetDelegateKeyByValidator"
	Query_GetDelegateKeyByEth_FullMethodName            = "/gravity.v1.Query/GetDelegateKeyByEth"
	Query_GetDelegateKeyByOrchestrator_FullMethodName   = "/gravity.v1.Query/GetDelegateKeyByOrchestrator"
	Query_GetPendingSendToEth_FullMethodName            = "/gravity.v1.Query/GetPendingSendToEth"
	Query_GetPendingIbcAutoForwards_FullMethodName      = "/gravity.v1.Query/GetPendingIbcAutoForwards"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Deployments queries deployments
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	CurrentValset(ctx context.Context, in *QueryCurrentValsetRequest, opts ...grpc.CallOption) (*QueryCurrentValsetResponse, error)
	ValsetRequest(ctx context.Context, in *QueryValsetRequestRequest, opts ...grpc.CallOption) (*QueryValsetRequestResponse, error)
	ValsetConfirm(ctx context.Context, in *QueryValsetConfirmRequest, opts ...grpc.CallOption) (*QueryValsetConfirmResponse, error)
	ValsetConfirmsByNonce(ctx context.Context, in *QueryValsetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryValsetConfirmsByNonceResponse, error)
	LastValsetRequests(ctx context.Context, in *QueryLastValsetRequestsRequest, opts ...grpc.CallOption) (*QueryLastValsetRequestsResponse, error)
	LastPendingValsetRequestByAddr(ctx context.Context, in *QueryLastPendingValsetRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingValsetRequestByAddrResponse, error)
	LastPendingBatchRequestByAddr(ctx context.Context, in *QueryLastPendingBatchRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchRequestByAddrResponse, error)
	LastPendingLogicCallByAddr(ctx context.Context, in *QueryLastPendingLogicCallByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingLogicCallByAddrResponse, error)
	LastEventNonceByAddr(ctx context.Context, in *QueryLastEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventNonceByAddrResponse, error)
	BatchFees(ctx context.Context, in *QueryBatchFeeRequest, opts ...grpc.CallOption) (*QueryBatchFeeResponse, error)
	OutgoingTxBatches(ctx context.Context, in *QueryOutgoingTxBatchesRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesResponse, error)
	OutgoingLogicCalls(ctx context.Context, in *QueryOutgoingLogicCallsRequest, opts ...grpc.CallOption) (*QueryOutgoingLogicCallsResponse, error)
	BatchRequestByNonce(ctx context.Context, in *QueryBatchRequestByNonceRequest, opts ...grpc.CallOption) (*QueryBatchRequestByNonceResponse, error)
	BatchConfirms(ctx context.Context, in *QueryBatchConfirmsRequest, opts ...grpc.CallOption) (*QueryBatchConfirmsResponse, error)
	LogicConfirms(ctx context.Context, in *QueryLogicConfirmsRequest, opts ...grpc.CallOption) (*QueryLogicConfirmsResponse, error)
	ERC20ToDenom(ctx context.Context, in *QueryERC20ToDenomRequest, opts ...grpc.CallOption) (*QueryERC20ToDenomResponse, error)
	DenomToERC20(ctx context.Context, in *QueryDenomToERC20Request, opts ...grpc.CallOption) (*QueryDenomToERC20Response, error)
	GetLastObservedEthBlock(ctx context.Context, in *QueryLastObservedEthBlockRequest, opts ...grpc.CallOption) (*QueryLastObservedEthBlockResponse, error)
	GetLastObservedEthNonce(ctx context.Context, in *QueryLastObservedEthNonceRequest, opts ...grpc.CallOption) (*QueryLastObservedEthNonceResponse, error)
	GetAttestations(ctx context.Context, in *QueryAttestationsRequest, opts ...grpc.CallOption) (*QueryAttestationsResponse, error)
	GetDelegateKeyByValidator(ctx context.Context, in *QueryDelegateKeysByValidatorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByValidatorAddressResponse, error)
	GetDelegateKeyByEth(ctx context.Context, in *QueryDelegateKeysByEthAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByEthAddressResponse, error)
	GetDelegateKeyByOrchestrator(ctx context.Context, in *QueryDelegateKeysByOrchestratorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByOrchestratorAddressResponse, error)
	GetPendingSendToEth(ctx context.Context, in *QueryPendingSendToEth, opts ...grpc.CallOption) (*QueryPendingSendToEthResponse, error)
	GetPendingIbcAutoForwards(ctx context.Context, in *QueryPendingIbcAutoForwards, opts ...grpc.CallOption) (*QueryPendingIbcAutoForwardsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentValset(ctx context.Context, in *QueryCurrentValsetRequest, opts ...grpc.CallOption) (*QueryCurrentValsetResponse, error) {
	out := new(QueryCurrentValsetResponse)
	err := c.cc.Invoke(ctx, Query_CurrentValset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetRequest(ctx context.Context, in *QueryValsetRequestRequest, opts ...grpc.CallOption) (*QueryValsetRequestResponse, error) {
	out := new(QueryValsetRequestResponse)
	err := c.cc.Invoke(ctx, Query_ValsetRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirm(ctx context.Context, in *QueryValsetConfirmRequest, opts ...grpc.CallOption) (*QueryValsetConfirmResponse, error) {
	out := new(QueryValsetConfirmResponse)
	err := c.cc.Invoke(ctx, Query_ValsetConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirmsByNonce(ctx context.Context, in *QueryValsetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryValsetConfirmsByNonceResponse, error) {
	out := new(QueryValsetConfirmsByNonceResponse)
	err := c.cc.Invoke(ctx, Query_ValsetConfirmsByNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastValsetRequests(ctx context.Context, in *QueryLastValsetRequestsRequest, opts ...grpc.CallOption) (*QueryLastValsetRequestsResponse, error) {
	out := new(QueryLastValsetRequestsResponse)
	err := c.cc.Invoke(ctx, Query_LastValsetRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingValsetRequestByAddr(ctx context.Context, in *QueryLastPendingValsetRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingValsetRequestByAddrResponse, error) {
	out := new(QueryLastPendingValsetRequestByAddrResponse)
	err := c.cc.Invoke(ctx, Query_LastPendingValsetRequestByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingBatchRequestByAddr(ctx context.Context, in *QueryLastPendingBatchRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchRequestByAddrResponse, error) {
	out := new(QueryLastPendingBatchRequestByAddrResponse)
	err := c.cc.Invoke(ctx, Query_LastPendingBatchRequestByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingLogicCallByAddr(ctx context.Context, in *QueryLastPendingLogicCallByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingLogicCallByAddrResponse, error) {
	out := new(QueryLastPendingLogicCallByAddrResponse)
	err := c.cc.Invoke(ctx, Query_LastPendingLogicCallByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEventNonceByAddr(ctx context.Context, in *QueryLastEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventNonceByAddrResponse, error) {
	out := new(QueryLastEventNonceByAddrResponse)
	err := c.cc.Invoke(ctx, Query_LastEventNonceByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchFees(ctx context.Context, in *QueryBatchFeeRequest, opts ...grpc.CallOption) (*QueryBatchFeeResponse, error) {
	out := new(QueryBatchFeeResponse)
	err := c.cc.Invoke(ctx, Query_BatchFees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingTxBatches(ctx context.Context, in *QueryOutgoingTxBatchesRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesResponse, error) {
	out := new(QueryOutgoingTxBatchesResponse)
	err := c.cc.Invoke(ctx, Query_OutgoingTxBatches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingLogicCalls(ctx context.Context, in *QueryOutgoingLogicCallsRequest, opts ...grpc.CallOption) (*QueryOutgoingLogicCallsResponse, error) {
	out := new(QueryOutgoingLogicCallsResponse)
	err := c.cc.Invoke(ctx, Query_OutgoingLogicCalls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchRequestByNonce(ctx context.Context, in *QueryBatchRequestByNonceRequest, opts ...grpc.CallOption) (*QueryBatchRequestByNonceResponse, error) {
	out := new(QueryBatchRequestByNonceResponse)
	err := c.cc.Invoke(ctx, Query_BatchRequestByNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchConfirms(ctx context.Context, in *QueryBatchConfirmsRequest, opts ...grpc.CallOption) (*QueryBatchConfirmsResponse, error) {
	out := new(QueryBatchConfirmsResponse)
	err := c.cc.Invoke(ctx, Query_BatchConfirms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LogicConfirms(ctx context.Context, in *QueryLogicConfirmsRequest, opts ...grpc.CallOption) (*QueryLogicConfirmsResponse, error) {
	out := new(QueryLogicConfirmsResponse)
	err := c.cc.Invoke(ctx, Query_LogicConfirms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC20ToDenom(ctx context.Context, in *QueryERC20ToDenomRequest, opts ...grpc.CallOption) (*QueryERC20ToDenomResponse, error) {
	out := new(QueryERC20ToDenomResponse)
	err := c.cc.Invoke(ctx, Query_ERC20ToDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomToERC20(ctx context.Context, in *QueryDenomToERC20Request, opts ...grpc.CallOption) (*QueryDenomToERC20Response, error) {
	out := new(QueryDenomToERC20Response)
	err := c.cc.Invoke(ctx, Query_DenomToERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastObservedEthBlock(ctx context.Context, in *QueryLastObservedEthBlockRequest, opts ...grpc.CallOption) (*QueryLastObservedEthBlockResponse, error) {
	out := new(QueryLastObservedEthBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetLastObservedEthBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastObservedEthNonce(ctx context.Context, in *QueryLastObservedEthNonceRequest, opts ...grpc.CallOption) (*QueryLastObservedEthNonceResponse, error) {
	out := new(QueryLastObservedEthNonceResponse)
	err := c.cc.Invoke(ctx, Query_GetLastObservedEthNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAttestations(ctx context.Context, in *QueryAttestationsRequest, opts ...grpc.CallOption) (*QueryAttestationsResponse, error) {
	out := new(QueryAttestationsResponse)
	err := c.cc.Invoke(ctx, Query_GetAttestations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByValidator(ctx context.Context, in *QueryDelegateKeysByValidatorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByValidatorAddressResponse, error) {
	out := new(QueryDelegateKeysByValidatorAddressResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateKeyByValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByEth(ctx context.Context, in *QueryDelegateKeysByEthAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByEthAddressResponse, error) {
	out := new(QueryDelegateKeysByEthAddressResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateKeyByEth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByOrchestrator(ctx context.Context, in *QueryDelegateKeysByOrchestratorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByOrchestratorAddressResponse, error) {
	out := new(QueryDelegateKeysByOrchestratorAddressResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateKeyByOrchestrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingSendToEth(ctx context.Context, in *QueryPendingSendToEth, opts ...grpc.CallOption) (*QueryPendingSendToEthResponse, error) {
	out := new(QueryPendingSendToEthResponse)
	err := c.cc.Invoke(ctx, Query_GetPendingSendToEth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingIbcAutoForwards(ctx context.Context, in *QueryPendingIbcAutoForwards, opts ...grpc.CallOption) (*QueryPendingIbcAutoForwardsResponse, error) {
	out := new(QueryPendingIbcAutoForwardsResponse)
	err := c.cc.Invoke(ctx, Query_GetPendingIbcAutoForwards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Deployments queries deployments
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	CurrentValset(context.Context, *QueryCurrentValsetRequest) (*QueryCurrentValsetResponse, error)
	ValsetRequest(context.Context, *QueryValsetRequestRequest) (*QueryValsetRequestResponse, error)
	ValsetConfirm(context.Context, *QueryValsetConfirmRequest) (*QueryValsetConfirmResponse, error)
	ValsetConfirmsByNonce(context.Context, *QueryValsetConfirmsByNonceRequest) (*QueryValsetConfirmsByNonceResponse, error)
	LastValsetRequests(context.Context, *QueryLastValsetRequestsRequest) (*QueryLastValsetRequestsResponse, error)
	LastPendingValsetRequestByAddr(context.Context, *QueryLastPendingValsetRequestByAddrRequest) (*QueryLastPendingValsetRequestByAddrResponse, error)
	LastPendingBatchRequestByAddr(context.Context, *QueryLastPendingBatchRequestByAddrRequest) (*QueryLastPendingBatchRequestByAddrResponse, error)
	LastPendingLogicCallByAddr(context.Context, *QueryLastPendingLogicCallByAddrRequest) (*QueryLastPendingLogicCallByAddrResponse, error)
	LastEventNonceByAddr(context.Context, *QueryLastEventNonceByAddrRequest) (*QueryLastEventNonceByAddrResponse, error)
	BatchFees(context.Context, *QueryBatchFeeRequest) (*QueryBatchFeeResponse, error)
	OutgoingTxBatches(context.Context, *QueryOutgoingTxBatchesRequest) (*QueryOutgoingTxBatchesResponse, error)
	OutgoingLogicCalls(context.Context, *QueryOutgoingLogicCallsRequest) (*QueryOutgoingLogicCallsResponse, error)
	BatchRequestByNonce(context.Context, *QueryBatchRequestByNonceRequest) (*QueryBatchRequestByNonceResponse, error)
	BatchConfirms(context.Context, *QueryBatchConfirmsRequest) (*QueryBatchConfirmsResponse, error)
	LogicConfirms(context.Context, *QueryLogicConfirmsRequest) (*QueryLogicConfirmsResponse, error)
	ERC20ToDenom(context.Context, *QueryERC20ToDenomRequest) (*QueryERC20ToDenomResponse, error)
	DenomToERC20(context.Context, *QueryDenomToERC20Request) (*QueryDenomToERC20Response, error)
	GetLastObservedEthBlock(context.Context, *QueryLastObservedEthBlockRequest) (*QueryLastObservedEthBlockResponse, error)
	GetLastObservedEthNonce(context.Context, *QueryLastObservedEthNonceRequest) (*QueryLastObservedEthNonceResponse, error)
	GetAttestations(context.Context, *QueryAttestationsRequest) (*QueryAttestationsResponse, error)
	GetDelegateKeyByValidator(context.Context, *QueryDelegateKeysByValidatorAddress) (*QueryDelegateKeysByValidatorAddressResponse, error)
	GetDelegateKeyByEth(context.Context, *QueryDelegateKeysByEthAddress) (*QueryDelegateKeysByEthAddressResponse, error)
	GetDelegateKeyByOrchestrator(context.Context, *QueryDelegateKeysByOrchestratorAddress) (*QueryDelegateKeysByOrchestratorAddressResponse, error)
	GetPendingSendToEth(context.Context, *QueryPendingSendToEth) (*QueryPendingSendToEthResponse, error)
	GetPendingIbcAutoForwards(context.Context, *QueryPendingIbcAutoForwards) (*QueryPendingIbcAutoForwardsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) CurrentValset(context.Context, *QueryCurrentValsetRequest) (*QueryCurrentValsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentValset not implemented")
}
func (UnimplementedQueryServer) ValsetRequest(context.Context, *QueryValsetRequestRequest) (*QueryValsetRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetRequest not implemented")
}
func (UnimplementedQueryServer) ValsetConfirm(context.Context, *QueryValsetConfirmRequest) (*QueryValsetConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirm not implemented")
}
func (UnimplementedQueryServer) ValsetConfirmsByNonce(context.Context, *QueryValsetConfirmsByNonceRequest) (*QueryValsetConfirmsByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirmsByNonce not implemented")
}
func (UnimplementedQueryServer) LastValsetRequests(context.Context, *QueryLastValsetRequestsRequest) (*QueryLastValsetRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastValsetRequests not implemented")
}
func (UnimplementedQueryServer) LastPendingValsetRequestByAddr(context.Context, *QueryLastPendingValsetRequestByAddrRequest) (*QueryLastPendingValsetRequestByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingValsetRequestByAddr not implemented")
}
func (UnimplementedQueryServer) LastPendingBatchRequestByAddr(context.Context, *QueryLastPendingBatchRequestByAddrRequest) (*QueryLastPendingBatchRequestByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingBatchRequestByAddr not implemented")
}
func (UnimplementedQueryServer) LastPendingLogicCallByAddr(context.Context, *QueryLastPendingLogicCallByAddrRequest) (*QueryLastPendingLogicCallByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingLogicCallByAddr not implemented")
}
func (UnimplementedQueryServer) LastEventNonceByAddr(context.Context, *QueryLastEventNonceByAddrRequest) (*QueryLastEventNonceByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEventNonceByAddr not implemented")
}
func (UnimplementedQueryServer) BatchFees(context.Context, *QueryBatchFeeRequest) (*QueryBatchFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchFees not implemented")
}
func (UnimplementedQueryServer) OutgoingTxBatches(context.Context, *QueryOutgoingTxBatchesRequest) (*QueryOutgoingTxBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingTxBatches not implemented")
}
func (UnimplementedQueryServer) OutgoingLogicCalls(context.Context, *QueryOutgoingLogicCallsRequest) (*QueryOutgoingLogicCallsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingLogicCalls not implemented")
}
func (UnimplementedQueryServer) BatchRequestByNonce(context.Context, *QueryBatchRequestByNonceRequest) (*QueryBatchRequestByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRequestByNonce not implemented")
}
func (UnimplementedQueryServer) BatchConfirms(context.Context, *QueryBatchConfirmsRequest) (*QueryBatchConfirmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchConfirms not implemented")
}
func (UnimplementedQueryServer) LogicConfirms(context.Context, *QueryLogicConfirmsRequest) (*QueryLogicConfirmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicConfirms not implemented")
}
func (UnimplementedQueryServer) ERC20ToDenom(context.Context, *QueryERC20ToDenomRequest) (*QueryERC20ToDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20ToDenom not implemented")
}
func (UnimplementedQueryServer) DenomToERC20(context.Context, *QueryDenomToERC20Request) (*QueryDenomToERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomToERC20 not implemented")
}
func (UnimplementedQueryServer) GetLastObservedEthBlock(context.Context, *QueryLastObservedEthBlockRequest) (*QueryLastObservedEthBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastObservedEthBlock not implemented")
}
func (UnimplementedQueryServer) GetLastObservedEthNonce(context.Context, *QueryLastObservedEthNonceRequest) (*QueryLastObservedEthNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastObservedEthNonce not implemented")
}
func (UnimplementedQueryServer) GetAttestations(context.Context, *QueryAttestationsRequest) (*QueryAttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttestations not implemented")
}
func (UnimplementedQueryServer) GetDelegateKeyByValidator(context.Context, *QueryDelegateKeysByValidatorAddress) (*QueryDelegateKeysByValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByValidator not implemented")
}
func (UnimplementedQueryServer) GetDelegateKeyByEth(context.Context, *QueryDelegateKeysByEthAddress) (*QueryDelegateKeysByEthAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByEth not implemented")
}
func (UnimplementedQueryServer) GetDelegateKeyByOrchestrator(context.Context, *QueryDelegateKeysByOrchestratorAddress) (*QueryDelegateKeysByOrchestratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByOrchestrator not implemented")
}
func (UnimplementedQueryServer) GetPendingSendToEth(context.Context, *QueryPendingSendToEth) (*QueryPendingSendToEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingSendToEth not implemented")
}
func (UnimplementedQueryServer) GetPendingIbcAutoForwards(context.Context, *QueryPendingIbcAutoForwards) (*QueryPendingIbcAutoForwardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingIbcAutoForwards not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentValset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentValsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentValset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentValset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentValset(ctx, req.(*QueryCurrentValsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValsetRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetRequest(ctx, req.(*QueryValsetRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValsetConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirm(ctx, req.(*QueryValsetConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirmsByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetConfirmsByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirmsByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValsetConfirmsByNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirmsByNonce(ctx, req.(*QueryValsetConfirmsByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastValsetRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastValsetRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastValsetRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastValsetRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastValsetRequests(ctx, req.(*QueryLastValsetRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingValsetRequestByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingValsetRequestByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingValsetRequestByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastPendingValsetRequestByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingValsetRequestByAddr(ctx, req.(*QueryLastPendingValsetRequestByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingBatchRequestByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingBatchRequestByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingBatchRequestByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastPendingBatchRequestByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingBatchRequestByAddr(ctx, req.(*QueryLastPendingBatchRequestByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingLogicCallByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingLogicCallByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingLogicCallByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastPendingLogicCallByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingLogicCallByAddr(ctx, req.(*QueryLastPendingLogicCallByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEventNonceByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastEventNonceByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastEventNonceByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, req.(*QueryLastEventNonceByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BatchFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchFees(ctx, req.(*QueryBatchFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingTxBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingTxBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingTxBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutgoingTxBatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingTxBatches(ctx, req.(*QueryOutgoingTxBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingLogicCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingLogicCallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingLogicCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutgoingLogicCalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingLogicCalls(ctx, req.(*QueryOutgoingLogicCallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchRequestByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchRequestByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchRequestByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BatchRequestByNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchRequestByNonce(ctx, req.(*QueryBatchRequestByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchConfirms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchConfirmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchConfirms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BatchConfirms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchConfirms(ctx, req.(*QueryBatchConfirmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LogicConfirms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLogicConfirmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LogicConfirms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LogicConfirms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LogicConfirms(ctx, req.(*QueryLogicConfirmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC20ToDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryERC20ToDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC20ToDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ERC20ToDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC20ToDenom(ctx, req.(*QueryERC20ToDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomToERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomToERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomToERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DenomToERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomToERC20(ctx, req.(*QueryDenomToERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastObservedEthBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastObservedEthBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastObservedEthBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLastObservedEthBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastObservedEthBlock(ctx, req.(*QueryLastObservedEthBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastObservedEthNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastObservedEthNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastObservedEthNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLastObservedEthNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastObservedEthNonce(ctx, req.(*QueryLastObservedEthNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAttestations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAttestations(ctx, req.(*QueryAttestationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateKeysByValidatorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateKeyByValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByValidator(ctx, req.(*QueryDelegateKeysByValidatorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateKeysByEthAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateKeyByEth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByEth(ctx, req.(*QueryDelegateKeysByEthAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByOrchestrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateKeysByOrchestratorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByOrchestrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateKeyByOrchestrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByOrchestrator(ctx, req.(*QueryDelegateKeysByOrchestratorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingSendToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSendToEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingSendToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPendingSendToEth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingSendToEth(ctx, req.(*QueryPendingSendToEth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingIbcAutoForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingIbcAutoForwards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingIbcAutoForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPendingIbcAutoForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingIbcAutoForwards(ctx, req.(*QueryPendingIbcAutoForwards))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CurrentValset",
			Handler:    _Query_CurrentValset_Handler,
		},
		{
			MethodName: "ValsetRequest",
			Handler:    _Query_ValsetRequest_Handler,
		},
		{
			MethodName: "ValsetConfirm",
			Handler:    _Query_ValsetConfirm_Handler,
		},
		{
			MethodName: "ValsetConfirmsByNonce",
			Handler:    _Query_ValsetConfirmsByNonce_Handler,
		},
		{
			MethodName: "LastValsetRequests",
			Handler:    _Query_LastValsetRequests_Handler,
		},
		{
			MethodName: "LastPendingValsetRequestByAddr",
			Handler:    _Query_LastPendingValsetRequestByAddr_Handler,
		},
		{
			MethodName: "LastPendingBatchRequestByAddr",
			Handler:    _Query_LastPendingBatchRequestByAddr_Handler,
		},
		{
			MethodName: "LastPendingLogicCallByAddr",
			Handler:    _Query_LastPendingLogicCallByAddr_Handler,
		},
		{
			MethodName: "LastEventNonceByAddr",
			Handler:    _Query_LastEventNonceByAddr_Handler,
		},
		{
			MethodName: "BatchFees",
			Handler:    _Query_BatchFees_Handler,
		},
		{
			MethodName: "OutgoingTxBatches",
			Handler:    _Query_OutgoingTxBatches_Handler,
		},
		{
			MethodName: "OutgoingLogicCalls",
			Handler:    _Query_OutgoingLogicCalls_Handler,
		},
		{
			MethodName: "BatchRequestByNonce",
			Handler:    _Query_BatchRequestByNonce_Handler,
		},
		{
			MethodName: "BatchConfirms",
			Handler:    _Query_BatchConfirms_Handler,
		},
		{
			MethodName: "LogicConfirms",
			Handler:    _Query_LogicConfirms_Handler,
		},
		{
			MethodName: "ERC20ToDenom",
			Handler:    _Query_ERC20ToDenom_Handler,
		},
		{
			MethodName: "DenomToERC20",
			Handler:    _Query_DenomToERC20_Handler,
		},
		{
			MethodName: "GetLastObservedEthBlock",
			Handler:    _Query_GetLastObservedEthBlock_Handler,
		},
		{
			MethodName: "GetLastObservedEthNonce",
			Handler:    _Query_GetLastObservedEthNonce_Handler,
		},
		{
			MethodName: "GetAttestations",
			Handler:    _Query_GetAttestations_Handler,
		},
		{
			MethodName: "GetDelegateKeyByValidator",
			Handler:    _Query_GetDelegateKeyByValidator_Handler,
		},
		{
			MethodName: "GetDelegateKeyByEth",
			Handler:    _Query_GetDelegateKeyByEth_Handler,
		},
		{
			MethodName: "GetDelegateKeyByOrchestrator",
			Handler:    _Query_GetDelegateKeyByOrchestrator_Handler,
		},
		{
			MethodName: "GetPendingSendToEth",
			Handler:    _Query_GetPendingSendToEth_Handler,
		},
		{
			MethodName: "GetPendingIbcAutoForwards",
			Handler:    _Query_GetPendingIbcAutoForwards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity/v1/query.proto",
}
