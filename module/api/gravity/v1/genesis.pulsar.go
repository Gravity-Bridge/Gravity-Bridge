// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package gravityv1

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Params_19_list)(nil)

type _Params_19_list struct {
	list *[]string
}

func (x *_Params_19_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_19_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Params_19_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_19_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_19_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field EthereumBlacklist as it is not of Message kind"))
}

func (x *_Params_19_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_19_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_19_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                                  protoreflect.MessageDescriptor
	fd_Params_gravity_id                       protoreflect.FieldDescriptor
	fd_Params_contract_source_hash             protoreflect.FieldDescriptor
	fd_Params_bridge_ethereum_address          protoreflect.FieldDescriptor
	fd_Params_bridge_chain_id                  protoreflect.FieldDescriptor
	fd_Params_signed_valsets_window            protoreflect.FieldDescriptor
	fd_Params_signed_batches_window            protoreflect.FieldDescriptor
	fd_Params_signed_logic_calls_window        protoreflect.FieldDescriptor
	fd_Params_target_batch_timeout             protoreflect.FieldDescriptor
	fd_Params_average_block_time               protoreflect.FieldDescriptor
	fd_Params_average_ethereum_block_time      protoreflect.FieldDescriptor
	fd_Params_slash_fraction_valset            protoreflect.FieldDescriptor
	fd_Params_slash_fraction_batch             protoreflect.FieldDescriptor
	fd_Params_slash_fraction_logic_call        protoreflect.FieldDescriptor
	fd_Params_unbond_slashing_valsets_window   protoreflect.FieldDescriptor
	fd_Params_slash_fraction_bad_eth_signature protoreflect.FieldDescriptor
	fd_Params_valset_reward                    protoreflect.FieldDescriptor
	fd_Params_bridge_active                    protoreflect.FieldDescriptor
	fd_Params_ethereum_blacklist               protoreflect.FieldDescriptor
	fd_Params_min_chain_fee_basis_points       protoreflect.FieldDescriptor
	fd_Params_chain_fee_auction_pool_fraction  protoreflect.FieldDescriptor
)

func init() {
	file_gravity_v1_genesis_proto_init()
	md_Params = File_gravity_v1_genesis_proto.Messages().ByName("Params")
	fd_Params_gravity_id = md_Params.Fields().ByName("gravity_id")
	fd_Params_contract_source_hash = md_Params.Fields().ByName("contract_source_hash")
	fd_Params_bridge_ethereum_address = md_Params.Fields().ByName("bridge_ethereum_address")
	fd_Params_bridge_chain_id = md_Params.Fields().ByName("bridge_chain_id")
	fd_Params_signed_valsets_window = md_Params.Fields().ByName("signed_valsets_window")
	fd_Params_signed_batches_window = md_Params.Fields().ByName("signed_batches_window")
	fd_Params_signed_logic_calls_window = md_Params.Fields().ByName("signed_logic_calls_window")
	fd_Params_target_batch_timeout = md_Params.Fields().ByName("target_batch_timeout")
	fd_Params_average_block_time = md_Params.Fields().ByName("average_block_time")
	fd_Params_average_ethereum_block_time = md_Params.Fields().ByName("average_ethereum_block_time")
	fd_Params_slash_fraction_valset = md_Params.Fields().ByName("slash_fraction_valset")
	fd_Params_slash_fraction_batch = md_Params.Fields().ByName("slash_fraction_batch")
	fd_Params_slash_fraction_logic_call = md_Params.Fields().ByName("slash_fraction_logic_call")
	fd_Params_unbond_slashing_valsets_window = md_Params.Fields().ByName("unbond_slashing_valsets_window")
	fd_Params_slash_fraction_bad_eth_signature = md_Params.Fields().ByName("slash_fraction_bad_eth_signature")
	fd_Params_valset_reward = md_Params.Fields().ByName("valset_reward")
	fd_Params_bridge_active = md_Params.Fields().ByName("bridge_active")
	fd_Params_ethereum_blacklist = md_Params.Fields().ByName("ethereum_blacklist")
	fd_Params_min_chain_fee_basis_points = md_Params.Fields().ByName("min_chain_fee_basis_points")
	fd_Params_chain_fee_auction_pool_fraction = md_Params.Fields().ByName("chain_fee_auction_pool_fraction")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_gravity_v1_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.GravityId != "" {
		value := protoreflect.ValueOfString(x.GravityId)
		if !f(fd_Params_gravity_id, value) {
			return
		}
	}
	if x.ContractSourceHash != "" {
		value := protoreflect.ValueOfString(x.ContractSourceHash)
		if !f(fd_Params_contract_source_hash, value) {
			return
		}
	}
	if x.BridgeEthereumAddress != "" {
		value := protoreflect.ValueOfString(x.BridgeEthereumAddress)
		if !f(fd_Params_bridge_ethereum_address, value) {
			return
		}
	}
	if x.BridgeChainId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BridgeChainId)
		if !f(fd_Params_bridge_chain_id, value) {
			return
		}
	}
	if x.SignedValsetsWindow != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignedValsetsWindow)
		if !f(fd_Params_signed_valsets_window, value) {
			return
		}
	}
	if x.SignedBatchesWindow != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignedBatchesWindow)
		if !f(fd_Params_signed_batches_window, value) {
			return
		}
	}
	if x.SignedLogicCallsWindow != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignedLogicCallsWindow)
		if !f(fd_Params_signed_logic_calls_window, value) {
			return
		}
	}
	if x.TargetBatchTimeout != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TargetBatchTimeout)
		if !f(fd_Params_target_batch_timeout, value) {
			return
		}
	}
	if x.AverageBlockTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AverageBlockTime)
		if !f(fd_Params_average_block_time, value) {
			return
		}
	}
	if x.AverageEthereumBlockTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AverageEthereumBlockTime)
		if !f(fd_Params_average_ethereum_block_time, value) {
			return
		}
	}
	if len(x.SlashFractionValset) != 0 {
		value := protoreflect.ValueOfBytes(x.SlashFractionValset)
		if !f(fd_Params_slash_fraction_valset, value) {
			return
		}
	}
	if len(x.SlashFractionBatch) != 0 {
		value := protoreflect.ValueOfBytes(x.SlashFractionBatch)
		if !f(fd_Params_slash_fraction_batch, value) {
			return
		}
	}
	if len(x.SlashFractionLogicCall) != 0 {
		value := protoreflect.ValueOfBytes(x.SlashFractionLogicCall)
		if !f(fd_Params_slash_fraction_logic_call, value) {
			return
		}
	}
	if x.UnbondSlashingValsetsWindow != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UnbondSlashingValsetsWindow)
		if !f(fd_Params_unbond_slashing_valsets_window, value) {
			return
		}
	}
	if len(x.SlashFractionBadEthSignature) != 0 {
		value := protoreflect.ValueOfBytes(x.SlashFractionBadEthSignature)
		if !f(fd_Params_slash_fraction_bad_eth_signature, value) {
			return
		}
	}
	if x.ValsetReward != nil {
		value := protoreflect.ValueOfMessage(x.ValsetReward.ProtoReflect())
		if !f(fd_Params_valset_reward, value) {
			return
		}
	}
	if x.BridgeActive != false {
		value := protoreflect.ValueOfBool(x.BridgeActive)
		if !f(fd_Params_bridge_active, value) {
			return
		}
	}
	if len(x.EthereumBlacklist) != 0 {
		value := protoreflect.ValueOfList(&_Params_19_list{list: &x.EthereumBlacklist})
		if !f(fd_Params_ethereum_blacklist, value) {
			return
		}
	}
	if x.MinChainFeeBasisPoints != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MinChainFeeBasisPoints)
		if !f(fd_Params_min_chain_fee_basis_points, value) {
			return
		}
	}
	if x.ChainFeeAuctionPoolFraction != "" {
		value := protoreflect.ValueOfString(x.ChainFeeAuctionPoolFraction)
		if !f(fd_Params_chain_fee_auction_pool_fraction, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "gravity.v1.Params.gravity_id":
		return x.GravityId != ""
	case "gravity.v1.Params.contract_source_hash":
		return x.ContractSourceHash != ""
	case "gravity.v1.Params.bridge_ethereum_address":
		return x.BridgeEthereumAddress != ""
	case "gravity.v1.Params.bridge_chain_id":
		return x.BridgeChainId != uint64(0)
	case "gravity.v1.Params.signed_valsets_window":
		return x.SignedValsetsWindow != uint64(0)
	case "gravity.v1.Params.signed_batches_window":
		return x.SignedBatchesWindow != uint64(0)
	case "gravity.v1.Params.signed_logic_calls_window":
		return x.SignedLogicCallsWindow != uint64(0)
	case "gravity.v1.Params.target_batch_timeout":
		return x.TargetBatchTimeout != uint64(0)
	case "gravity.v1.Params.average_block_time":
		return x.AverageBlockTime != uint64(0)
	case "gravity.v1.Params.average_ethereum_block_time":
		return x.AverageEthereumBlockTime != uint64(0)
	case "gravity.v1.Params.slash_fraction_valset":
		return len(x.SlashFractionValset) != 0
	case "gravity.v1.Params.slash_fraction_batch":
		return len(x.SlashFractionBatch) != 0
	case "gravity.v1.Params.slash_fraction_logic_call":
		return len(x.SlashFractionLogicCall) != 0
	case "gravity.v1.Params.unbond_slashing_valsets_window":
		return x.UnbondSlashingValsetsWindow != uint64(0)
	case "gravity.v1.Params.slash_fraction_bad_eth_signature":
		return len(x.SlashFractionBadEthSignature) != 0
	case "gravity.v1.Params.valset_reward":
		return x.ValsetReward != nil
	case "gravity.v1.Params.bridge_active":
		return x.BridgeActive != false
	case "gravity.v1.Params.ethereum_blacklist":
		return len(x.EthereumBlacklist) != 0
	case "gravity.v1.Params.min_chain_fee_basis_points":
		return x.MinChainFeeBasisPoints != uint64(0)
	case "gravity.v1.Params.chain_fee_auction_pool_fraction":
		return x.ChainFeeAuctionPoolFraction != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.Params"))
		}
		panic(fmt.Errorf("message gravity.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "gravity.v1.Params.gravity_id":
		x.GravityId = ""
	case "gravity.v1.Params.contract_source_hash":
		x.ContractSourceHash = ""
	case "gravity.v1.Params.bridge_ethereum_address":
		x.BridgeEthereumAddress = ""
	case "gravity.v1.Params.bridge_chain_id":
		x.BridgeChainId = uint64(0)
	case "gravity.v1.Params.signed_valsets_window":
		x.SignedValsetsWindow = uint64(0)
	case "gravity.v1.Params.signed_batches_window":
		x.SignedBatchesWindow = uint64(0)
	case "gravity.v1.Params.signed_logic_calls_window":
		x.SignedLogicCallsWindow = uint64(0)
	case "gravity.v1.Params.target_batch_timeout":
		x.TargetBatchTimeout = uint64(0)
	case "gravity.v1.Params.average_block_time":
		x.AverageBlockTime = uint64(0)
	case "gravity.v1.Params.average_ethereum_block_time":
		x.AverageEthereumBlockTime = uint64(0)
	case "gravity.v1.Params.slash_fraction_valset":
		x.SlashFractionValset = nil
	case "gravity.v1.Params.slash_fraction_batch":
		x.SlashFractionBatch = nil
	case "gravity.v1.Params.slash_fraction_logic_call":
		x.SlashFractionLogicCall = nil
	case "gravity.v1.Params.unbond_slashing_valsets_window":
		x.UnbondSlashingValsetsWindow = uint64(0)
	case "gravity.v1.Params.slash_fraction_bad_eth_signature":
		x.SlashFractionBadEthSignature = nil
	case "gravity.v1.Params.valset_reward":
		x.ValsetReward = nil
	case "gravity.v1.Params.bridge_active":
		x.BridgeActive = false
	case "gravity.v1.Params.ethereum_blacklist":
		x.EthereumBlacklist = nil
	case "gravity.v1.Params.min_chain_fee_basis_points":
		x.MinChainFeeBasisPoints = uint64(0)
	case "gravity.v1.Params.chain_fee_auction_pool_fraction":
		x.ChainFeeAuctionPoolFraction = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.Params"))
		}
		panic(fmt.Errorf("message gravity.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "gravity.v1.Params.gravity_id":
		value := x.GravityId
		return protoreflect.ValueOfString(value)
	case "gravity.v1.Params.contract_source_hash":
		value := x.ContractSourceHash
		return protoreflect.ValueOfString(value)
	case "gravity.v1.Params.bridge_ethereum_address":
		value := x.BridgeEthereumAddress
		return protoreflect.ValueOfString(value)
	case "gravity.v1.Params.bridge_chain_id":
		value := x.BridgeChainId
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.Params.signed_valsets_window":
		value := x.SignedValsetsWindow
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.Params.signed_batches_window":
		value := x.SignedBatchesWindow
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.Params.signed_logic_calls_window":
		value := x.SignedLogicCallsWindow
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.Params.target_batch_timeout":
		value := x.TargetBatchTimeout
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.Params.average_block_time":
		value := x.AverageBlockTime
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.Params.average_ethereum_block_time":
		value := x.AverageEthereumBlockTime
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.Params.slash_fraction_valset":
		value := x.SlashFractionValset
		return protoreflect.ValueOfBytes(value)
	case "gravity.v1.Params.slash_fraction_batch":
		value := x.SlashFractionBatch
		return protoreflect.ValueOfBytes(value)
	case "gravity.v1.Params.slash_fraction_logic_call":
		value := x.SlashFractionLogicCall
		return protoreflect.ValueOfBytes(value)
	case "gravity.v1.Params.unbond_slashing_valsets_window":
		value := x.UnbondSlashingValsetsWindow
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.Params.slash_fraction_bad_eth_signature":
		value := x.SlashFractionBadEthSignature
		return protoreflect.ValueOfBytes(value)
	case "gravity.v1.Params.valset_reward":
		value := x.ValsetReward
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "gravity.v1.Params.bridge_active":
		value := x.BridgeActive
		return protoreflect.ValueOfBool(value)
	case "gravity.v1.Params.ethereum_blacklist":
		if len(x.EthereumBlacklist) == 0 {
			return protoreflect.ValueOfList(&_Params_19_list{})
		}
		listValue := &_Params_19_list{list: &x.EthereumBlacklist}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.Params.min_chain_fee_basis_points":
		value := x.MinChainFeeBasisPoints
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.Params.chain_fee_auction_pool_fraction":
		value := x.ChainFeeAuctionPoolFraction
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.Params"))
		}
		panic(fmt.Errorf("message gravity.v1.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "gravity.v1.Params.gravity_id":
		x.GravityId = value.Interface().(string)
	case "gravity.v1.Params.contract_source_hash":
		x.ContractSourceHash = value.Interface().(string)
	case "gravity.v1.Params.bridge_ethereum_address":
		x.BridgeEthereumAddress = value.Interface().(string)
	case "gravity.v1.Params.bridge_chain_id":
		x.BridgeChainId = value.Uint()
	case "gravity.v1.Params.signed_valsets_window":
		x.SignedValsetsWindow = value.Uint()
	case "gravity.v1.Params.signed_batches_window":
		x.SignedBatchesWindow = value.Uint()
	case "gravity.v1.Params.signed_logic_calls_window":
		x.SignedLogicCallsWindow = value.Uint()
	case "gravity.v1.Params.target_batch_timeout":
		x.TargetBatchTimeout = value.Uint()
	case "gravity.v1.Params.average_block_time":
		x.AverageBlockTime = value.Uint()
	case "gravity.v1.Params.average_ethereum_block_time":
		x.AverageEthereumBlockTime = value.Uint()
	case "gravity.v1.Params.slash_fraction_valset":
		x.SlashFractionValset = value.Bytes()
	case "gravity.v1.Params.slash_fraction_batch":
		x.SlashFractionBatch = value.Bytes()
	case "gravity.v1.Params.slash_fraction_logic_call":
		x.SlashFractionLogicCall = value.Bytes()
	case "gravity.v1.Params.unbond_slashing_valsets_window":
		x.UnbondSlashingValsetsWindow = value.Uint()
	case "gravity.v1.Params.slash_fraction_bad_eth_signature":
		x.SlashFractionBadEthSignature = value.Bytes()
	case "gravity.v1.Params.valset_reward":
		x.ValsetReward = value.Message().Interface().(*v1beta1.Coin)
	case "gravity.v1.Params.bridge_active":
		x.BridgeActive = value.Bool()
	case "gravity.v1.Params.ethereum_blacklist":
		lv := value.List()
		clv := lv.(*_Params_19_list)
		x.EthereumBlacklist = *clv.list
	case "gravity.v1.Params.min_chain_fee_basis_points":
		x.MinChainFeeBasisPoints = value.Uint()
	case "gravity.v1.Params.chain_fee_auction_pool_fraction":
		x.ChainFeeAuctionPoolFraction = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.Params"))
		}
		panic(fmt.Errorf("message gravity.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "gravity.v1.Params.valset_reward":
		if x.ValsetReward == nil {
			x.ValsetReward = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ValsetReward.ProtoReflect())
	case "gravity.v1.Params.ethereum_blacklist":
		if x.EthereumBlacklist == nil {
			x.EthereumBlacklist = []string{}
		}
		value := &_Params_19_list{list: &x.EthereumBlacklist}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.Params.gravity_id":
		panic(fmt.Errorf("field gravity_id of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.contract_source_hash":
		panic(fmt.Errorf("field contract_source_hash of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.bridge_ethereum_address":
		panic(fmt.Errorf("field bridge_ethereum_address of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.bridge_chain_id":
		panic(fmt.Errorf("field bridge_chain_id of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.signed_valsets_window":
		panic(fmt.Errorf("field signed_valsets_window of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.signed_batches_window":
		panic(fmt.Errorf("field signed_batches_window of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.signed_logic_calls_window":
		panic(fmt.Errorf("field signed_logic_calls_window of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.target_batch_timeout":
		panic(fmt.Errorf("field target_batch_timeout of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.average_block_time":
		panic(fmt.Errorf("field average_block_time of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.average_ethereum_block_time":
		panic(fmt.Errorf("field average_ethereum_block_time of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.slash_fraction_valset":
		panic(fmt.Errorf("field slash_fraction_valset of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.slash_fraction_batch":
		panic(fmt.Errorf("field slash_fraction_batch of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.slash_fraction_logic_call":
		panic(fmt.Errorf("field slash_fraction_logic_call of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.unbond_slashing_valsets_window":
		panic(fmt.Errorf("field unbond_slashing_valsets_window of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.slash_fraction_bad_eth_signature":
		panic(fmt.Errorf("field slash_fraction_bad_eth_signature of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.bridge_active":
		panic(fmt.Errorf("field bridge_active of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.min_chain_fee_basis_points":
		panic(fmt.Errorf("field min_chain_fee_basis_points of message gravity.v1.Params is not mutable"))
	case "gravity.v1.Params.chain_fee_auction_pool_fraction":
		panic(fmt.Errorf("field chain_fee_auction_pool_fraction of message gravity.v1.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.Params"))
		}
		panic(fmt.Errorf("message gravity.v1.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "gravity.v1.Params.gravity_id":
		return protoreflect.ValueOfString("")
	case "gravity.v1.Params.contract_source_hash":
		return protoreflect.ValueOfString("")
	case "gravity.v1.Params.bridge_ethereum_address":
		return protoreflect.ValueOfString("")
	case "gravity.v1.Params.bridge_chain_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.Params.signed_valsets_window":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.Params.signed_batches_window":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.Params.signed_logic_calls_window":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.Params.target_batch_timeout":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.Params.average_block_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.Params.average_ethereum_block_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.Params.slash_fraction_valset":
		return protoreflect.ValueOfBytes(nil)
	case "gravity.v1.Params.slash_fraction_batch":
		return protoreflect.ValueOfBytes(nil)
	case "gravity.v1.Params.slash_fraction_logic_call":
		return protoreflect.ValueOfBytes(nil)
	case "gravity.v1.Params.unbond_slashing_valsets_window":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.Params.slash_fraction_bad_eth_signature":
		return protoreflect.ValueOfBytes(nil)
	case "gravity.v1.Params.valset_reward":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "gravity.v1.Params.bridge_active":
		return protoreflect.ValueOfBool(false)
	case "gravity.v1.Params.ethereum_blacklist":
		list := []string{}
		return protoreflect.ValueOfList(&_Params_19_list{list: &list})
	case "gravity.v1.Params.min_chain_fee_basis_points":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.Params.chain_fee_auction_pool_fraction":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.Params"))
		}
		panic(fmt.Errorf("message gravity.v1.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in gravity.v1.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.GravityId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ContractSourceHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BridgeEthereumAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BridgeChainId != 0 {
			n += 1 + runtime.Sov(uint64(x.BridgeChainId))
		}
		if x.SignedValsetsWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.SignedValsetsWindow))
		}
		if x.SignedBatchesWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.SignedBatchesWindow))
		}
		if x.SignedLogicCallsWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.SignedLogicCallsWindow))
		}
		if x.TargetBatchTimeout != 0 {
			n += 1 + runtime.Sov(uint64(x.TargetBatchTimeout))
		}
		if x.AverageBlockTime != 0 {
			n += 1 + runtime.Sov(uint64(x.AverageBlockTime))
		}
		if x.AverageEthereumBlockTime != 0 {
			n += 1 + runtime.Sov(uint64(x.AverageEthereumBlockTime))
		}
		l = len(x.SlashFractionValset)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SlashFractionBatch)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SlashFractionLogicCall)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnbondSlashingValsetsWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.UnbondSlashingValsetsWindow))
		}
		l = len(x.SlashFractionBadEthSignature)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.ValsetReward != nil {
			l = options.Size(x.ValsetReward)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.BridgeActive {
			n += 3
		}
		if len(x.EthereumBlacklist) > 0 {
			for _, s := range x.EthereumBlacklist {
				l = len(s)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.MinChainFeeBasisPoints != 0 {
			n += 2 + runtime.Sov(uint64(x.MinChainFeeBasisPoints))
		}
		l = len(x.ChainFeeAuctionPoolFraction)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ChainFeeAuctionPoolFraction) > 0 {
			i -= len(x.ChainFeeAuctionPoolFraction)
			copy(dAtA[i:], x.ChainFeeAuctionPoolFraction)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainFeeAuctionPoolFraction)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
		if x.MinChainFeeBasisPoints != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinChainFeeBasisPoints))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if len(x.EthereumBlacklist) > 0 {
			for iNdEx := len(x.EthereumBlacklist) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.EthereumBlacklist[iNdEx])
				copy(dAtA[i:], x.EthereumBlacklist[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EthereumBlacklist[iNdEx])))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x9a
			}
		}
		if x.BridgeActive {
			i--
			if x.BridgeActive {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.ValsetReward != nil {
			encoded, err := options.Marshal(x.ValsetReward)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.SlashFractionBadEthSignature) > 0 {
			i -= len(x.SlashFractionBadEthSignature)
			copy(dAtA[i:], x.SlashFractionBadEthSignature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashFractionBadEthSignature)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if x.UnbondSlashingValsetsWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UnbondSlashingValsetsWindow))
			i--
			dAtA[i] = 0x78
		}
		if len(x.SlashFractionLogicCall) > 0 {
			i -= len(x.SlashFractionLogicCall)
			copy(dAtA[i:], x.SlashFractionLogicCall)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashFractionLogicCall)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.SlashFractionBatch) > 0 {
			i -= len(x.SlashFractionBatch)
			copy(dAtA[i:], x.SlashFractionBatch)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashFractionBatch)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.SlashFractionValset) > 0 {
			i -= len(x.SlashFractionValset)
			copy(dAtA[i:], x.SlashFractionValset)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashFractionValset)))
			i--
			dAtA[i] = 0x62
		}
		if x.AverageEthereumBlockTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AverageEthereumBlockTime))
			i--
			dAtA[i] = 0x58
		}
		if x.AverageBlockTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AverageBlockTime))
			i--
			dAtA[i] = 0x50
		}
		if x.TargetBatchTimeout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TargetBatchTimeout))
			i--
			dAtA[i] = 0x48
		}
		if x.SignedLogicCallsWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignedLogicCallsWindow))
			i--
			dAtA[i] = 0x40
		}
		if x.SignedBatchesWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignedBatchesWindow))
			i--
			dAtA[i] = 0x38
		}
		if x.SignedValsetsWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignedValsetsWindow))
			i--
			dAtA[i] = 0x30
		}
		if x.BridgeChainId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BridgeChainId))
			i--
			dAtA[i] = 0x28
		}
		if len(x.BridgeEthereumAddress) > 0 {
			i -= len(x.BridgeEthereumAddress)
			copy(dAtA[i:], x.BridgeEthereumAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BridgeEthereumAddress)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ContractSourceHash) > 0 {
			i -= len(x.ContractSourceHash)
			copy(dAtA[i:], x.ContractSourceHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractSourceHash)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.GravityId) > 0 {
			i -= len(x.GravityId)
			copy(dAtA[i:], x.GravityId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GravityId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GravityId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GravityId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractSourceHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractSourceHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BridgeEthereumAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BridgeEthereumAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
				}
				x.BridgeChainId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BridgeChainId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedValsetsWindow", wireType)
				}
				x.SignedValsetsWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignedValsetsWindow |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedBatchesWindow", wireType)
				}
				x.SignedBatchesWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignedBatchesWindow |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedLogicCallsWindow", wireType)
				}
				x.SignedLogicCallsWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignedLogicCallsWindow |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetBatchTimeout", wireType)
				}
				x.TargetBatchTimeout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TargetBatchTimeout |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
				}
				x.AverageBlockTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AverageBlockTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AverageEthereumBlockTime", wireType)
				}
				x.AverageEthereumBlockTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AverageEthereumBlockTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashFractionValset", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashFractionValset = append(x.SlashFractionValset[:0], dAtA[iNdEx:postIndex]...)
				if x.SlashFractionValset == nil {
					x.SlashFractionValset = []byte{}
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBatch", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashFractionBatch = append(x.SlashFractionBatch[:0], dAtA[iNdEx:postIndex]...)
				if x.SlashFractionBatch == nil {
					x.SlashFractionBatch = []byte{}
				}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashFractionLogicCall", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashFractionLogicCall = append(x.SlashFractionLogicCall[:0], dAtA[iNdEx:postIndex]...)
				if x.SlashFractionLogicCall == nil {
					x.SlashFractionLogicCall = []byte{}
				}
				iNdEx = postIndex
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbondSlashingValsetsWindow", wireType)
				}
				x.UnbondSlashingValsetsWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UnbondSlashingValsetsWindow |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBadEthSignature", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashFractionBadEthSignature = append(x.SlashFractionBadEthSignature[:0], dAtA[iNdEx:postIndex]...)
				if x.SlashFractionBadEthSignature == nil {
					x.SlashFractionBadEthSignature = []byte{}
				}
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValsetReward", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ValsetReward == nil {
					x.ValsetReward = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ValsetReward); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BridgeActive", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.BridgeActive = bool(v != 0)
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EthereumBlacklist", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EthereumBlacklist = append(x.EthereumBlacklist, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinChainFeeBasisPoints", wireType)
				}
				x.MinChainFeeBasisPoints = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinChainFeeBasisPoints |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 21:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainFeeAuctionPoolFraction", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainFeeAuctionPoolFraction = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_GenesisState_3_list)(nil)

type _GenesisState_3_list struct {
	list *[]*Valset
}

func (x *_GenesisState_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Valset)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Valset)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_3_list) AppendMutable() protoreflect.Value {
	v := new(Valset)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_3_list) NewElement() protoreflect.Value {
	v := new(Valset)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_4_list)(nil)

type _GenesisState_4_list struct {
	list *[]*MsgValsetConfirm
}

func (x *_GenesisState_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgValsetConfirm)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgValsetConfirm)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_4_list) AppendMutable() protoreflect.Value {
	v := new(MsgValsetConfirm)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_4_list) NewElement() protoreflect.Value {
	v := new(MsgValsetConfirm)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_5_list)(nil)

type _GenesisState_5_list struct {
	list *[]*OutgoingTxBatch
}

func (x *_GenesisState_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTxBatch)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTxBatch)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_5_list) AppendMutable() protoreflect.Value {
	v := new(OutgoingTxBatch)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_5_list) NewElement() protoreflect.Value {
	v := new(OutgoingTxBatch)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_6_list)(nil)

type _GenesisState_6_list struct {
	list *[]*MsgConfirmBatch
}

func (x *_GenesisState_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgConfirmBatch)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgConfirmBatch)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_6_list) AppendMutable() protoreflect.Value {
	v := new(MsgConfirmBatch)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_6_list) NewElement() protoreflect.Value {
	v := new(MsgConfirmBatch)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_7_list)(nil)

type _GenesisState_7_list struct {
	list *[]*OutgoingLogicCall
}

func (x *_GenesisState_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingLogicCall)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingLogicCall)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_7_list) AppendMutable() protoreflect.Value {
	v := new(OutgoingLogicCall)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_7_list) NewElement() protoreflect.Value {
	v := new(OutgoingLogicCall)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_8_list)(nil)

type _GenesisState_8_list struct {
	list *[]*MsgConfirmLogicCall
}

func (x *_GenesisState_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgConfirmLogicCall)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgConfirmLogicCall)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_8_list) AppendMutable() protoreflect.Value {
	v := new(MsgConfirmLogicCall)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_8_list) NewElement() protoreflect.Value {
	v := new(MsgConfirmLogicCall)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_9_list)(nil)

type _GenesisState_9_list struct {
	list *[]*Attestation
}

func (x *_GenesisState_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Attestation)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Attestation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_9_list) AppendMutable() protoreflect.Value {
	v := new(Attestation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_9_list) NewElement() protoreflect.Value {
	v := new(Attestation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_10_list)(nil)

type _GenesisState_10_list struct {
	list *[]*MsgSetOrchestratorAddress
}

func (x *_GenesisState_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgSetOrchestratorAddress)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgSetOrchestratorAddress)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_10_list) AppendMutable() protoreflect.Value {
	v := new(MsgSetOrchestratorAddress)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_10_list) NewElement() protoreflect.Value {
	v := new(MsgSetOrchestratorAddress)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_11_list)(nil)

type _GenesisState_11_list struct {
	list *[]*ERC20ToDenom
}

func (x *_GenesisState_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ERC20ToDenom)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ERC20ToDenom)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_11_list) AppendMutable() protoreflect.Value {
	v := new(ERC20ToDenom)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_11_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_11_list) NewElement() protoreflect.Value {
	v := new(ERC20ToDenom)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_11_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_12_list)(nil)

type _GenesisState_12_list struct {
	list *[]*OutgoingTransferTx
}

func (x *_GenesisState_12_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_12_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_12_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTransferTx)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_12_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTransferTx)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_12_list) AppendMutable() protoreflect.Value {
	v := new(OutgoingTransferTx)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_12_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_12_list) NewElement() protoreflect.Value {
	v := new(OutgoingTransferTx)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_12_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_13_list)(nil)

type _GenesisState_13_list struct {
	list *[]*PendingIbcAutoForward
}

func (x *_GenesisState_13_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_13_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_13_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PendingIbcAutoForward)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_13_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PendingIbcAutoForward)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_13_list) AppendMutable() protoreflect.Value {
	v := new(PendingIbcAutoForward)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_13_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_13_list) NewElement() protoreflect.Value {
	v := new(PendingIbcAutoForward)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_13_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState                           protoreflect.MessageDescriptor
	fd_GenesisState_params                    protoreflect.FieldDescriptor
	fd_GenesisState_gravity_nonces            protoreflect.FieldDescriptor
	fd_GenesisState_valsets                   protoreflect.FieldDescriptor
	fd_GenesisState_valset_confirms           protoreflect.FieldDescriptor
	fd_GenesisState_batches                   protoreflect.FieldDescriptor
	fd_GenesisState_batch_confirms            protoreflect.FieldDescriptor
	fd_GenesisState_logic_calls               protoreflect.FieldDescriptor
	fd_GenesisState_logic_call_confirms       protoreflect.FieldDescriptor
	fd_GenesisState_attestations              protoreflect.FieldDescriptor
	fd_GenesisState_delegate_keys             protoreflect.FieldDescriptor
	fd_GenesisState_erc20_to_denoms           protoreflect.FieldDescriptor
	fd_GenesisState_unbatched_transfers       protoreflect.FieldDescriptor
	fd_GenesisState_pending_ibc_auto_forwards protoreflect.FieldDescriptor
)

func init() {
	file_gravity_v1_genesis_proto_init()
	md_GenesisState = File_gravity_v1_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_params = md_GenesisState.Fields().ByName("params")
	fd_GenesisState_gravity_nonces = md_GenesisState.Fields().ByName("gravity_nonces")
	fd_GenesisState_valsets = md_GenesisState.Fields().ByName("valsets")
	fd_GenesisState_valset_confirms = md_GenesisState.Fields().ByName("valset_confirms")
	fd_GenesisState_batches = md_GenesisState.Fields().ByName("batches")
	fd_GenesisState_batch_confirms = md_GenesisState.Fields().ByName("batch_confirms")
	fd_GenesisState_logic_calls = md_GenesisState.Fields().ByName("logic_calls")
	fd_GenesisState_logic_call_confirms = md_GenesisState.Fields().ByName("logic_call_confirms")
	fd_GenesisState_attestations = md_GenesisState.Fields().ByName("attestations")
	fd_GenesisState_delegate_keys = md_GenesisState.Fields().ByName("delegate_keys")
	fd_GenesisState_erc20_to_denoms = md_GenesisState.Fields().ByName("erc20_to_denoms")
	fd_GenesisState_unbatched_transfers = md_GenesisState.Fields().ByName("unbatched_transfers")
	fd_GenesisState_pending_ibc_auto_forwards = md_GenesisState.Fields().ByName("pending_ibc_auto_forwards")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_gravity_v1_genesis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_GenesisState_params, value) {
			return
		}
	}
	if x.GravityNonces != nil {
		value := protoreflect.ValueOfMessage(x.GravityNonces.ProtoReflect())
		if !f(fd_GenesisState_gravity_nonces, value) {
			return
		}
	}
	if len(x.Valsets) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_3_list{list: &x.Valsets})
		if !f(fd_GenesisState_valsets, value) {
			return
		}
	}
	if len(x.ValsetConfirms) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_4_list{list: &x.ValsetConfirms})
		if !f(fd_GenesisState_valset_confirms, value) {
			return
		}
	}
	if len(x.Batches) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_5_list{list: &x.Batches})
		if !f(fd_GenesisState_batches, value) {
			return
		}
	}
	if len(x.BatchConfirms) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_6_list{list: &x.BatchConfirms})
		if !f(fd_GenesisState_batch_confirms, value) {
			return
		}
	}
	if len(x.LogicCalls) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_7_list{list: &x.LogicCalls})
		if !f(fd_GenesisState_logic_calls, value) {
			return
		}
	}
	if len(x.LogicCallConfirms) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_8_list{list: &x.LogicCallConfirms})
		if !f(fd_GenesisState_logic_call_confirms, value) {
			return
		}
	}
	if len(x.Attestations) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_9_list{list: &x.Attestations})
		if !f(fd_GenesisState_attestations, value) {
			return
		}
	}
	if len(x.DelegateKeys) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_10_list{list: &x.DelegateKeys})
		if !f(fd_GenesisState_delegate_keys, value) {
			return
		}
	}
	if len(x.Erc20ToDenoms) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_11_list{list: &x.Erc20ToDenoms})
		if !f(fd_GenesisState_erc20_to_denoms, value) {
			return
		}
	}
	if len(x.UnbatchedTransfers) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_12_list{list: &x.UnbatchedTransfers})
		if !f(fd_GenesisState_unbatched_transfers, value) {
			return
		}
	}
	if len(x.PendingIbcAutoForwards) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_13_list{list: &x.PendingIbcAutoForwards})
		if !f(fd_GenesisState_pending_ibc_auto_forwards, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "gravity.v1.GenesisState.params":
		return x.Params != nil
	case "gravity.v1.GenesisState.gravity_nonces":
		return x.GravityNonces != nil
	case "gravity.v1.GenesisState.valsets":
		return len(x.Valsets) != 0
	case "gravity.v1.GenesisState.valset_confirms":
		return len(x.ValsetConfirms) != 0
	case "gravity.v1.GenesisState.batches":
		return len(x.Batches) != 0
	case "gravity.v1.GenesisState.batch_confirms":
		return len(x.BatchConfirms) != 0
	case "gravity.v1.GenesisState.logic_calls":
		return len(x.LogicCalls) != 0
	case "gravity.v1.GenesisState.logic_call_confirms":
		return len(x.LogicCallConfirms) != 0
	case "gravity.v1.GenesisState.attestations":
		return len(x.Attestations) != 0
	case "gravity.v1.GenesisState.delegate_keys":
		return len(x.DelegateKeys) != 0
	case "gravity.v1.GenesisState.erc20_to_denoms":
		return len(x.Erc20ToDenoms) != 0
	case "gravity.v1.GenesisState.unbatched_transfers":
		return len(x.UnbatchedTransfers) != 0
	case "gravity.v1.GenesisState.pending_ibc_auto_forwards":
		return len(x.PendingIbcAutoForwards) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GenesisState"))
		}
		panic(fmt.Errorf("message gravity.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "gravity.v1.GenesisState.params":
		x.Params = nil
	case "gravity.v1.GenesisState.gravity_nonces":
		x.GravityNonces = nil
	case "gravity.v1.GenesisState.valsets":
		x.Valsets = nil
	case "gravity.v1.GenesisState.valset_confirms":
		x.ValsetConfirms = nil
	case "gravity.v1.GenesisState.batches":
		x.Batches = nil
	case "gravity.v1.GenesisState.batch_confirms":
		x.BatchConfirms = nil
	case "gravity.v1.GenesisState.logic_calls":
		x.LogicCalls = nil
	case "gravity.v1.GenesisState.logic_call_confirms":
		x.LogicCallConfirms = nil
	case "gravity.v1.GenesisState.attestations":
		x.Attestations = nil
	case "gravity.v1.GenesisState.delegate_keys":
		x.DelegateKeys = nil
	case "gravity.v1.GenesisState.erc20_to_denoms":
		x.Erc20ToDenoms = nil
	case "gravity.v1.GenesisState.unbatched_transfers":
		x.UnbatchedTransfers = nil
	case "gravity.v1.GenesisState.pending_ibc_auto_forwards":
		x.PendingIbcAutoForwards = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GenesisState"))
		}
		panic(fmt.Errorf("message gravity.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "gravity.v1.GenesisState.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "gravity.v1.GenesisState.gravity_nonces":
		value := x.GravityNonces
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "gravity.v1.GenesisState.valsets":
		if len(x.Valsets) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_3_list{})
		}
		listValue := &_GenesisState_3_list{list: &x.Valsets}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.valset_confirms":
		if len(x.ValsetConfirms) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_4_list{})
		}
		listValue := &_GenesisState_4_list{list: &x.ValsetConfirms}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.batches":
		if len(x.Batches) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_5_list{})
		}
		listValue := &_GenesisState_5_list{list: &x.Batches}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.batch_confirms":
		if len(x.BatchConfirms) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_6_list{})
		}
		listValue := &_GenesisState_6_list{list: &x.BatchConfirms}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.logic_calls":
		if len(x.LogicCalls) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_7_list{})
		}
		listValue := &_GenesisState_7_list{list: &x.LogicCalls}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.logic_call_confirms":
		if len(x.LogicCallConfirms) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_8_list{})
		}
		listValue := &_GenesisState_8_list{list: &x.LogicCallConfirms}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.attestations":
		if len(x.Attestations) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_9_list{})
		}
		listValue := &_GenesisState_9_list{list: &x.Attestations}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.delegate_keys":
		if len(x.DelegateKeys) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_10_list{})
		}
		listValue := &_GenesisState_10_list{list: &x.DelegateKeys}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.erc20_to_denoms":
		if len(x.Erc20ToDenoms) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_11_list{})
		}
		listValue := &_GenesisState_11_list{list: &x.Erc20ToDenoms}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.unbatched_transfers":
		if len(x.UnbatchedTransfers) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_12_list{})
		}
		listValue := &_GenesisState_12_list{list: &x.UnbatchedTransfers}
		return protoreflect.ValueOfList(listValue)
	case "gravity.v1.GenesisState.pending_ibc_auto_forwards":
		if len(x.PendingIbcAutoForwards) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_13_list{})
		}
		listValue := &_GenesisState_13_list{list: &x.PendingIbcAutoForwards}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GenesisState"))
		}
		panic(fmt.Errorf("message gravity.v1.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "gravity.v1.GenesisState.params":
		x.Params = value.Message().Interface().(*Params)
	case "gravity.v1.GenesisState.gravity_nonces":
		x.GravityNonces = value.Message().Interface().(*GravityNonces)
	case "gravity.v1.GenesisState.valsets":
		lv := value.List()
		clv := lv.(*_GenesisState_3_list)
		x.Valsets = *clv.list
	case "gravity.v1.GenesisState.valset_confirms":
		lv := value.List()
		clv := lv.(*_GenesisState_4_list)
		x.ValsetConfirms = *clv.list
	case "gravity.v1.GenesisState.batches":
		lv := value.List()
		clv := lv.(*_GenesisState_5_list)
		x.Batches = *clv.list
	case "gravity.v1.GenesisState.batch_confirms":
		lv := value.List()
		clv := lv.(*_GenesisState_6_list)
		x.BatchConfirms = *clv.list
	case "gravity.v1.GenesisState.logic_calls":
		lv := value.List()
		clv := lv.(*_GenesisState_7_list)
		x.LogicCalls = *clv.list
	case "gravity.v1.GenesisState.logic_call_confirms":
		lv := value.List()
		clv := lv.(*_GenesisState_8_list)
		x.LogicCallConfirms = *clv.list
	case "gravity.v1.GenesisState.attestations":
		lv := value.List()
		clv := lv.(*_GenesisState_9_list)
		x.Attestations = *clv.list
	case "gravity.v1.GenesisState.delegate_keys":
		lv := value.List()
		clv := lv.(*_GenesisState_10_list)
		x.DelegateKeys = *clv.list
	case "gravity.v1.GenesisState.erc20_to_denoms":
		lv := value.List()
		clv := lv.(*_GenesisState_11_list)
		x.Erc20ToDenoms = *clv.list
	case "gravity.v1.GenesisState.unbatched_transfers":
		lv := value.List()
		clv := lv.(*_GenesisState_12_list)
		x.UnbatchedTransfers = *clv.list
	case "gravity.v1.GenesisState.pending_ibc_auto_forwards":
		lv := value.List()
		clv := lv.(*_GenesisState_13_list)
		x.PendingIbcAutoForwards = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GenesisState"))
		}
		panic(fmt.Errorf("message gravity.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "gravity.v1.GenesisState.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "gravity.v1.GenesisState.gravity_nonces":
		if x.GravityNonces == nil {
			x.GravityNonces = new(GravityNonces)
		}
		return protoreflect.ValueOfMessage(x.GravityNonces.ProtoReflect())
	case "gravity.v1.GenesisState.valsets":
		if x.Valsets == nil {
			x.Valsets = []*Valset{}
		}
		value := &_GenesisState_3_list{list: &x.Valsets}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.valset_confirms":
		if x.ValsetConfirms == nil {
			x.ValsetConfirms = []*MsgValsetConfirm{}
		}
		value := &_GenesisState_4_list{list: &x.ValsetConfirms}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.batches":
		if x.Batches == nil {
			x.Batches = []*OutgoingTxBatch{}
		}
		value := &_GenesisState_5_list{list: &x.Batches}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.batch_confirms":
		if x.BatchConfirms == nil {
			x.BatchConfirms = []*MsgConfirmBatch{}
		}
		value := &_GenesisState_6_list{list: &x.BatchConfirms}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.logic_calls":
		if x.LogicCalls == nil {
			x.LogicCalls = []*OutgoingLogicCall{}
		}
		value := &_GenesisState_7_list{list: &x.LogicCalls}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.logic_call_confirms":
		if x.LogicCallConfirms == nil {
			x.LogicCallConfirms = []*MsgConfirmLogicCall{}
		}
		value := &_GenesisState_8_list{list: &x.LogicCallConfirms}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.attestations":
		if x.Attestations == nil {
			x.Attestations = []*Attestation{}
		}
		value := &_GenesisState_9_list{list: &x.Attestations}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.delegate_keys":
		if x.DelegateKeys == nil {
			x.DelegateKeys = []*MsgSetOrchestratorAddress{}
		}
		value := &_GenesisState_10_list{list: &x.DelegateKeys}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.erc20_to_denoms":
		if x.Erc20ToDenoms == nil {
			x.Erc20ToDenoms = []*ERC20ToDenom{}
		}
		value := &_GenesisState_11_list{list: &x.Erc20ToDenoms}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.unbatched_transfers":
		if x.UnbatchedTransfers == nil {
			x.UnbatchedTransfers = []*OutgoingTransferTx{}
		}
		value := &_GenesisState_12_list{list: &x.UnbatchedTransfers}
		return protoreflect.ValueOfList(value)
	case "gravity.v1.GenesisState.pending_ibc_auto_forwards":
		if x.PendingIbcAutoForwards == nil {
			x.PendingIbcAutoForwards = []*PendingIbcAutoForward{}
		}
		value := &_GenesisState_13_list{list: &x.PendingIbcAutoForwards}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GenesisState"))
		}
		panic(fmt.Errorf("message gravity.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "gravity.v1.GenesisState.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "gravity.v1.GenesisState.gravity_nonces":
		m := new(GravityNonces)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "gravity.v1.GenesisState.valsets":
		list := []*Valset{}
		return protoreflect.ValueOfList(&_GenesisState_3_list{list: &list})
	case "gravity.v1.GenesisState.valset_confirms":
		list := []*MsgValsetConfirm{}
		return protoreflect.ValueOfList(&_GenesisState_4_list{list: &list})
	case "gravity.v1.GenesisState.batches":
		list := []*OutgoingTxBatch{}
		return protoreflect.ValueOfList(&_GenesisState_5_list{list: &list})
	case "gravity.v1.GenesisState.batch_confirms":
		list := []*MsgConfirmBatch{}
		return protoreflect.ValueOfList(&_GenesisState_6_list{list: &list})
	case "gravity.v1.GenesisState.logic_calls":
		list := []*OutgoingLogicCall{}
		return protoreflect.ValueOfList(&_GenesisState_7_list{list: &list})
	case "gravity.v1.GenesisState.logic_call_confirms":
		list := []*MsgConfirmLogicCall{}
		return protoreflect.ValueOfList(&_GenesisState_8_list{list: &list})
	case "gravity.v1.GenesisState.attestations":
		list := []*Attestation{}
		return protoreflect.ValueOfList(&_GenesisState_9_list{list: &list})
	case "gravity.v1.GenesisState.delegate_keys":
		list := []*MsgSetOrchestratorAddress{}
		return protoreflect.ValueOfList(&_GenesisState_10_list{list: &list})
	case "gravity.v1.GenesisState.erc20_to_denoms":
		list := []*ERC20ToDenom{}
		return protoreflect.ValueOfList(&_GenesisState_11_list{list: &list})
	case "gravity.v1.GenesisState.unbatched_transfers":
		list := []*OutgoingTransferTx{}
		return protoreflect.ValueOfList(&_GenesisState_12_list{list: &list})
	case "gravity.v1.GenesisState.pending_ibc_auto_forwards":
		list := []*PendingIbcAutoForward{}
		return protoreflect.ValueOfList(&_GenesisState_13_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GenesisState"))
		}
		panic(fmt.Errorf("message gravity.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in gravity.v1.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GravityNonces != nil {
			l = options.Size(x.GravityNonces)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Valsets) > 0 {
			for _, e := range x.Valsets {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ValsetConfirms) > 0 {
			for _, e := range x.ValsetConfirms {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Batches) > 0 {
			for _, e := range x.Batches {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.BatchConfirms) > 0 {
			for _, e := range x.BatchConfirms {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.LogicCalls) > 0 {
			for _, e := range x.LogicCalls {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.LogicCallConfirms) > 0 {
			for _, e := range x.LogicCallConfirms {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Attestations) > 0 {
			for _, e := range x.Attestations {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.DelegateKeys) > 0 {
			for _, e := range x.DelegateKeys {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Erc20ToDenoms) > 0 {
			for _, e := range x.Erc20ToDenoms {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.UnbatchedTransfers) > 0 {
			for _, e := range x.UnbatchedTransfers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PendingIbcAutoForwards) > 0 {
			for _, e := range x.PendingIbcAutoForwards {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PendingIbcAutoForwards) > 0 {
			for iNdEx := len(x.PendingIbcAutoForwards) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PendingIbcAutoForwards[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x6a
			}
		}
		if len(x.UnbatchedTransfers) > 0 {
			for iNdEx := len(x.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.UnbatchedTransfers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x62
			}
		}
		if len(x.Erc20ToDenoms) > 0 {
			for iNdEx := len(x.Erc20ToDenoms) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Erc20ToDenoms[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x5a
			}
		}
		if len(x.DelegateKeys) > 0 {
			for iNdEx := len(x.DelegateKeys) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.DelegateKeys[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.Attestations) > 0 {
			for iNdEx := len(x.Attestations) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Attestations[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.LogicCallConfirms) > 0 {
			for iNdEx := len(x.LogicCallConfirms) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.LogicCallConfirms[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.LogicCalls) > 0 {
			for iNdEx := len(x.LogicCalls) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.LogicCalls[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.BatchConfirms) > 0 {
			for iNdEx := len(x.BatchConfirms) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BatchConfirms[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.Batches) > 0 {
			for iNdEx := len(x.Batches) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Batches[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.ValsetConfirms) > 0 {
			for iNdEx := len(x.ValsetConfirms) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ValsetConfirms[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.Valsets) > 0 {
			for iNdEx := len(x.Valsets) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Valsets[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.GravityNonces != nil {
			encoded, err := options.Marshal(x.GravityNonces)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GravityNonces", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.GravityNonces == nil {
					x.GravityNonces = &GravityNonces{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.GravityNonces); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Valsets", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Valsets = append(x.Valsets, &Valset{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Valsets[len(x.Valsets)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValsetConfirms", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValsetConfirms = append(x.ValsetConfirms, &MsgValsetConfirm{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ValsetConfirms[len(x.ValsetConfirms)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Batches = append(x.Batches, &OutgoingTxBatch{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Batches[len(x.Batches)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BatchConfirms", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BatchConfirms = append(x.BatchConfirms, &MsgConfirmBatch{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BatchConfirms[len(x.BatchConfirms)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LogicCalls", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LogicCalls = append(x.LogicCalls, &OutgoingLogicCall{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LogicCalls[len(x.LogicCalls)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LogicCallConfirms", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LogicCallConfirms = append(x.LogicCallConfirms, &MsgConfirmLogicCall{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LogicCallConfirms[len(x.LogicCallConfirms)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Attestations = append(x.Attestations, &Attestation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Attestations[len(x.Attestations)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegateKeys", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelegateKeys = append(x.DelegateKeys, &MsgSetOrchestratorAddress{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DelegateKeys[len(x.DelegateKeys)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Erc20ToDenoms", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Erc20ToDenoms = append(x.Erc20ToDenoms, &ERC20ToDenom{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Erc20ToDenoms[len(x.Erc20ToDenoms)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UnbatchedTransfers = append(x.UnbatchedTransfers, &OutgoingTransferTx{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnbatchedTransfers[len(x.UnbatchedTransfers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PendingIbcAutoForwards", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PendingIbcAutoForwards = append(x.PendingIbcAutoForwards, &PendingIbcAutoForward{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PendingIbcAutoForwards[len(x.PendingIbcAutoForwards)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GravityNonces                               protoreflect.MessageDescriptor
	fd_GravityNonces_latest_valset_nonce           protoreflect.FieldDescriptor
	fd_GravityNonces_last_observed_nonce           protoreflect.FieldDescriptor
	fd_GravityNonces_last_slashed_valset_nonce     protoreflect.FieldDescriptor
	fd_GravityNonces_last_slashed_batch_block      protoreflect.FieldDescriptor
	fd_GravityNonces_last_slashed_logic_call_block protoreflect.FieldDescriptor
	fd_GravityNonces_last_tx_pool_id               protoreflect.FieldDescriptor
	fd_GravityNonces_last_batch_id                 protoreflect.FieldDescriptor
)

func init() {
	file_gravity_v1_genesis_proto_init()
	md_GravityNonces = File_gravity_v1_genesis_proto.Messages().ByName("GravityNonces")
	fd_GravityNonces_latest_valset_nonce = md_GravityNonces.Fields().ByName("latest_valset_nonce")
	fd_GravityNonces_last_observed_nonce = md_GravityNonces.Fields().ByName("last_observed_nonce")
	fd_GravityNonces_last_slashed_valset_nonce = md_GravityNonces.Fields().ByName("last_slashed_valset_nonce")
	fd_GravityNonces_last_slashed_batch_block = md_GravityNonces.Fields().ByName("last_slashed_batch_block")
	fd_GravityNonces_last_slashed_logic_call_block = md_GravityNonces.Fields().ByName("last_slashed_logic_call_block")
	fd_GravityNonces_last_tx_pool_id = md_GravityNonces.Fields().ByName("last_tx_pool_id")
	fd_GravityNonces_last_batch_id = md_GravityNonces.Fields().ByName("last_batch_id")
}

var _ protoreflect.Message = (*fastReflection_GravityNonces)(nil)

type fastReflection_GravityNonces GravityNonces

func (x *GravityNonces) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GravityNonces)(x)
}

func (x *GravityNonces) slowProtoReflect() protoreflect.Message {
	mi := &file_gravity_v1_genesis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GravityNonces_messageType fastReflection_GravityNonces_messageType
var _ protoreflect.MessageType = fastReflection_GravityNonces_messageType{}

type fastReflection_GravityNonces_messageType struct{}

func (x fastReflection_GravityNonces_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GravityNonces)(nil)
}
func (x fastReflection_GravityNonces_messageType) New() protoreflect.Message {
	return new(fastReflection_GravityNonces)
}
func (x fastReflection_GravityNonces_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GravityNonces
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GravityNonces) Descriptor() protoreflect.MessageDescriptor {
	return md_GravityNonces
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GravityNonces) Type() protoreflect.MessageType {
	return _fastReflection_GravityNonces_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GravityNonces) New() protoreflect.Message {
	return new(fastReflection_GravityNonces)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GravityNonces) Interface() protoreflect.ProtoMessage {
	return (*GravityNonces)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GravityNonces) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.LatestValsetNonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LatestValsetNonce)
		if !f(fd_GravityNonces_latest_valset_nonce, value) {
			return
		}
	}
	if x.LastObservedNonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastObservedNonce)
		if !f(fd_GravityNonces_last_observed_nonce, value) {
			return
		}
	}
	if x.LastSlashedValsetNonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastSlashedValsetNonce)
		if !f(fd_GravityNonces_last_slashed_valset_nonce, value) {
			return
		}
	}
	if x.LastSlashedBatchBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastSlashedBatchBlock)
		if !f(fd_GravityNonces_last_slashed_batch_block, value) {
			return
		}
	}
	if x.LastSlashedLogicCallBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastSlashedLogicCallBlock)
		if !f(fd_GravityNonces_last_slashed_logic_call_block, value) {
			return
		}
	}
	if x.LastTxPoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastTxPoolId)
		if !f(fd_GravityNonces_last_tx_pool_id, value) {
			return
		}
	}
	if x.LastBatchId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastBatchId)
		if !f(fd_GravityNonces_last_batch_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GravityNonces) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "gravity.v1.GravityNonces.latest_valset_nonce":
		return x.LatestValsetNonce != uint64(0)
	case "gravity.v1.GravityNonces.last_observed_nonce":
		return x.LastObservedNonce != uint64(0)
	case "gravity.v1.GravityNonces.last_slashed_valset_nonce":
		return x.LastSlashedValsetNonce != uint64(0)
	case "gravity.v1.GravityNonces.last_slashed_batch_block":
		return x.LastSlashedBatchBlock != uint64(0)
	case "gravity.v1.GravityNonces.last_slashed_logic_call_block":
		return x.LastSlashedLogicCallBlock != uint64(0)
	case "gravity.v1.GravityNonces.last_tx_pool_id":
		return x.LastTxPoolId != uint64(0)
	case "gravity.v1.GravityNonces.last_batch_id":
		return x.LastBatchId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GravityNonces"))
		}
		panic(fmt.Errorf("message gravity.v1.GravityNonces does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GravityNonces) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "gravity.v1.GravityNonces.latest_valset_nonce":
		x.LatestValsetNonce = uint64(0)
	case "gravity.v1.GravityNonces.last_observed_nonce":
		x.LastObservedNonce = uint64(0)
	case "gravity.v1.GravityNonces.last_slashed_valset_nonce":
		x.LastSlashedValsetNonce = uint64(0)
	case "gravity.v1.GravityNonces.last_slashed_batch_block":
		x.LastSlashedBatchBlock = uint64(0)
	case "gravity.v1.GravityNonces.last_slashed_logic_call_block":
		x.LastSlashedLogicCallBlock = uint64(0)
	case "gravity.v1.GravityNonces.last_tx_pool_id":
		x.LastTxPoolId = uint64(0)
	case "gravity.v1.GravityNonces.last_batch_id":
		x.LastBatchId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GravityNonces"))
		}
		panic(fmt.Errorf("message gravity.v1.GravityNonces does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GravityNonces) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "gravity.v1.GravityNonces.latest_valset_nonce":
		value := x.LatestValsetNonce
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.GravityNonces.last_observed_nonce":
		value := x.LastObservedNonce
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.GravityNonces.last_slashed_valset_nonce":
		value := x.LastSlashedValsetNonce
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.GravityNonces.last_slashed_batch_block":
		value := x.LastSlashedBatchBlock
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.GravityNonces.last_slashed_logic_call_block":
		value := x.LastSlashedLogicCallBlock
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.GravityNonces.last_tx_pool_id":
		value := x.LastTxPoolId
		return protoreflect.ValueOfUint64(value)
	case "gravity.v1.GravityNonces.last_batch_id":
		value := x.LastBatchId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GravityNonces"))
		}
		panic(fmt.Errorf("message gravity.v1.GravityNonces does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GravityNonces) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "gravity.v1.GravityNonces.latest_valset_nonce":
		x.LatestValsetNonce = value.Uint()
	case "gravity.v1.GravityNonces.last_observed_nonce":
		x.LastObservedNonce = value.Uint()
	case "gravity.v1.GravityNonces.last_slashed_valset_nonce":
		x.LastSlashedValsetNonce = value.Uint()
	case "gravity.v1.GravityNonces.last_slashed_batch_block":
		x.LastSlashedBatchBlock = value.Uint()
	case "gravity.v1.GravityNonces.last_slashed_logic_call_block":
		x.LastSlashedLogicCallBlock = value.Uint()
	case "gravity.v1.GravityNonces.last_tx_pool_id":
		x.LastTxPoolId = value.Uint()
	case "gravity.v1.GravityNonces.last_batch_id":
		x.LastBatchId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GravityNonces"))
		}
		panic(fmt.Errorf("message gravity.v1.GravityNonces does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GravityNonces) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "gravity.v1.GravityNonces.latest_valset_nonce":
		panic(fmt.Errorf("field latest_valset_nonce of message gravity.v1.GravityNonces is not mutable"))
	case "gravity.v1.GravityNonces.last_observed_nonce":
		panic(fmt.Errorf("field last_observed_nonce of message gravity.v1.GravityNonces is not mutable"))
	case "gravity.v1.GravityNonces.last_slashed_valset_nonce":
		panic(fmt.Errorf("field last_slashed_valset_nonce of message gravity.v1.GravityNonces is not mutable"))
	case "gravity.v1.GravityNonces.last_slashed_batch_block":
		panic(fmt.Errorf("field last_slashed_batch_block of message gravity.v1.GravityNonces is not mutable"))
	case "gravity.v1.GravityNonces.last_slashed_logic_call_block":
		panic(fmt.Errorf("field last_slashed_logic_call_block of message gravity.v1.GravityNonces is not mutable"))
	case "gravity.v1.GravityNonces.last_tx_pool_id":
		panic(fmt.Errorf("field last_tx_pool_id of message gravity.v1.GravityNonces is not mutable"))
	case "gravity.v1.GravityNonces.last_batch_id":
		panic(fmt.Errorf("field last_batch_id of message gravity.v1.GravityNonces is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GravityNonces"))
		}
		panic(fmt.Errorf("message gravity.v1.GravityNonces does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GravityNonces) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "gravity.v1.GravityNonces.latest_valset_nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.GravityNonces.last_observed_nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.GravityNonces.last_slashed_valset_nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.GravityNonces.last_slashed_batch_block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.GravityNonces.last_slashed_logic_call_block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.GravityNonces.last_tx_pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "gravity.v1.GravityNonces.last_batch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: gravity.v1.GravityNonces"))
		}
		panic(fmt.Errorf("message gravity.v1.GravityNonces does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GravityNonces) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in gravity.v1.GravityNonces", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GravityNonces) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GravityNonces) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GravityNonces) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GravityNonces) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GravityNonces)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.LatestValsetNonce != 0 {
			n += 1 + runtime.Sov(uint64(x.LatestValsetNonce))
		}
		if x.LastObservedNonce != 0 {
			n += 1 + runtime.Sov(uint64(x.LastObservedNonce))
		}
		if x.LastSlashedValsetNonce != 0 {
			n += 1 + runtime.Sov(uint64(x.LastSlashedValsetNonce))
		}
		if x.LastSlashedBatchBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.LastSlashedBatchBlock))
		}
		if x.LastSlashedLogicCallBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.LastSlashedLogicCallBlock))
		}
		if x.LastTxPoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.LastTxPoolId))
		}
		if x.LastBatchId != 0 {
			n += 1 + runtime.Sov(uint64(x.LastBatchId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GravityNonces)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastBatchId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastBatchId))
			i--
			dAtA[i] = 0x38
		}
		if x.LastTxPoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastTxPoolId))
			i--
			dAtA[i] = 0x30
		}
		if x.LastSlashedLogicCallBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastSlashedLogicCallBlock))
			i--
			dAtA[i] = 0x28
		}
		if x.LastSlashedBatchBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastSlashedBatchBlock))
			i--
			dAtA[i] = 0x20
		}
		if x.LastSlashedValsetNonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastSlashedValsetNonce))
			i--
			dAtA[i] = 0x18
		}
		if x.LastObservedNonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastObservedNonce))
			i--
			dAtA[i] = 0x10
		}
		if x.LatestValsetNonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LatestValsetNonce))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GravityNonces)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GravityNonces: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GravityNonces: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LatestValsetNonce", wireType)
				}
				x.LatestValsetNonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LatestValsetNonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastObservedNonce", wireType)
				}
				x.LastObservedNonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastObservedNonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastSlashedValsetNonce", wireType)
				}
				x.LastSlashedValsetNonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastSlashedValsetNonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastSlashedBatchBlock", wireType)
				}
				x.LastSlashedBatchBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastSlashedBatchBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastSlashedLogicCallBlock", wireType)
				}
				x.LastSlashedLogicCallBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastSlashedLogicCallBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastTxPoolId", wireType)
				}
				x.LastTxPoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastTxPoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastBatchId", wireType)
				}
				x.LastBatchId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastBatchId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: gravity/v1/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The slashing fractions for the various gravity related slashing conditions.
// The first three refer to not submitting a particular message, the third for
// submitting a different claim for the same Ethereum event
//
// unbond_slashing_valsets_window
//
// The unbond slashing valsets window is used to determine how many blocks after
// starting to unbond a validator needs to continue signing blocks. The goal of
// this paramater is that when a validator leaves the set, if their leaving
// creates enough change in the validator set to justify an update they will
// sign a validator set update for the Ethereum bridge that does not include
// themselves. Allowing us to remove them from the Ethereum bridge and replace
// them with the new set gracefully.
//
// valset_reward
//
// These parameters allow for the bridge oracle to resolve a fork on the
// Ethereum chain without halting the chain. Once set reset bridge state will
// roll back events to the nonce provided in reset_bridge_nonce if and only if
// those events have not yet been observed (executed on the Cosmos chain). This
// allows for easy handling of cases where for example an Ethereum hardfork has
// occured and more than 1/3 of the vlaidtor set disagrees with the rest.
// Normally this would require a chain halt, manual genesis editing and restar
// to resolve with this feature a governance proposal can be used instead
//
// bridge_active
//
// This boolean flag can be used by governance to temporarily halt the bridge
// due to a vulnerability or other issue In this context halting the bridge
// means prevent the execution of any oracle events from Ethereum and preventing
// the creation of new batches that may be relayed to Ethereum.
// This does not prevent the creation of validator sets
// or slashing for not submitting validator set signatures as either of these
// might allow key signers to leave the validator set and steal funds on
// Ethereum without consequence. The practical outcome of this flag being set to
// 'false' is that deposits from Ethereum will not show up and withdraws from
// Cosmos will not execute on Ethereum.
//
// min_chain_fee_basis_points
//
// The minimum SendToEth `chain_fee` amount, in terms of basis points. e.g. 10%
// fee = 1000, and 0.02% fee = 2
//
// chain_fee_auction_pool_fraction
//
// Specifies what fraction of the SendToEth `chain_fee` amount should go to the
// auction pool. e.g. "0.5" gives a 50% auction pool / staker split while "0.9"
// would cause 90% of the fee to go to the pool
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GravityId                    string        `protobuf:"bytes,1,opt,name=gravity_id,json=gravityId,proto3" json:"gravity_id,omitempty"`
	ContractSourceHash           string        `protobuf:"bytes,2,opt,name=contract_source_hash,json=contractSourceHash,proto3" json:"contract_source_hash,omitempty"`
	BridgeEthereumAddress        string        `protobuf:"bytes,4,opt,name=bridge_ethereum_address,json=bridgeEthereumAddress,proto3" json:"bridge_ethereum_address,omitempty"`
	BridgeChainId                uint64        `protobuf:"varint,5,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	SignedValsetsWindow          uint64        `protobuf:"varint,6,opt,name=signed_valsets_window,json=signedValsetsWindow,proto3" json:"signed_valsets_window,omitempty"`
	SignedBatchesWindow          uint64        `protobuf:"varint,7,opt,name=signed_batches_window,json=signedBatchesWindow,proto3" json:"signed_batches_window,omitempty"`
	SignedLogicCallsWindow       uint64        `protobuf:"varint,8,opt,name=signed_logic_calls_window,json=signedLogicCallsWindow,proto3" json:"signed_logic_calls_window,omitempty"`
	TargetBatchTimeout           uint64        `protobuf:"varint,9,opt,name=target_batch_timeout,json=targetBatchTimeout,proto3" json:"target_batch_timeout,omitempty"`
	AverageBlockTime             uint64        `protobuf:"varint,10,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	AverageEthereumBlockTime     uint64        `protobuf:"varint,11,opt,name=average_ethereum_block_time,json=averageEthereumBlockTime,proto3" json:"average_ethereum_block_time,omitempty"`
	SlashFractionValset          []byte        `protobuf:"bytes,12,opt,name=slash_fraction_valset,json=slashFractionValset,proto3" json:"slash_fraction_valset,omitempty"`
	SlashFractionBatch           []byte        `protobuf:"bytes,13,opt,name=slash_fraction_batch,json=slashFractionBatch,proto3" json:"slash_fraction_batch,omitempty"`
	SlashFractionLogicCall       []byte        `protobuf:"bytes,14,opt,name=slash_fraction_logic_call,json=slashFractionLogicCall,proto3" json:"slash_fraction_logic_call,omitempty"`
	UnbondSlashingValsetsWindow  uint64        `protobuf:"varint,15,opt,name=unbond_slashing_valsets_window,json=unbondSlashingValsetsWindow,proto3" json:"unbond_slashing_valsets_window,omitempty"`
	SlashFractionBadEthSignature []byte        `protobuf:"bytes,16,opt,name=slash_fraction_bad_eth_signature,json=slashFractionBadEthSignature,proto3" json:"slash_fraction_bad_eth_signature,omitempty"`
	ValsetReward                 *v1beta1.Coin `protobuf:"bytes,17,opt,name=valset_reward,json=valsetReward,proto3" json:"valset_reward,omitempty"`
	BridgeActive                 bool          `protobuf:"varint,18,opt,name=bridge_active,json=bridgeActive,proto3" json:"bridge_active,omitempty"`
	// addresses on this blacklist are forbidden from depositing or withdrawing
	// from Ethereum to the bridge
	EthereumBlacklist           []string `protobuf:"bytes,19,rep,name=ethereum_blacklist,json=ethereumBlacklist,proto3" json:"ethereum_blacklist,omitempty"`
	MinChainFeeBasisPoints      uint64   `protobuf:"varint,20,opt,name=min_chain_fee_basis_points,json=minChainFeeBasisPoints,proto3" json:"min_chain_fee_basis_points,omitempty"`
	ChainFeeAuctionPoolFraction string   `protobuf:"bytes,21,opt,name=chain_fee_auction_pool_fraction,json=chainFeeAuctionPoolFraction,proto3" json:"chain_fee_auction_pool_fraction,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gravity_v1_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_gravity_v1_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetGravityId() string {
	if x != nil {
		return x.GravityId
	}
	return ""
}

func (x *Params) GetContractSourceHash() string {
	if x != nil {
		return x.ContractSourceHash
	}
	return ""
}

func (x *Params) GetBridgeEthereumAddress() string {
	if x != nil {
		return x.BridgeEthereumAddress
	}
	return ""
}

func (x *Params) GetBridgeChainId() uint64 {
	if x != nil {
		return x.BridgeChainId
	}
	return 0
}

func (x *Params) GetSignedValsetsWindow() uint64 {
	if x != nil {
		return x.SignedValsetsWindow
	}
	return 0
}

func (x *Params) GetSignedBatchesWindow() uint64 {
	if x != nil {
		return x.SignedBatchesWindow
	}
	return 0
}

func (x *Params) GetSignedLogicCallsWindow() uint64 {
	if x != nil {
		return x.SignedLogicCallsWindow
	}
	return 0
}

func (x *Params) GetTargetBatchTimeout() uint64 {
	if x != nil {
		return x.TargetBatchTimeout
	}
	return 0
}

func (x *Params) GetAverageBlockTime() uint64 {
	if x != nil {
		return x.AverageBlockTime
	}
	return 0
}

func (x *Params) GetAverageEthereumBlockTime() uint64 {
	if x != nil {
		return x.AverageEthereumBlockTime
	}
	return 0
}

func (x *Params) GetSlashFractionValset() []byte {
	if x != nil {
		return x.SlashFractionValset
	}
	return nil
}

func (x *Params) GetSlashFractionBatch() []byte {
	if x != nil {
		return x.SlashFractionBatch
	}
	return nil
}

func (x *Params) GetSlashFractionLogicCall() []byte {
	if x != nil {
		return x.SlashFractionLogicCall
	}
	return nil
}

func (x *Params) GetUnbondSlashingValsetsWindow() uint64 {
	if x != nil {
		return x.UnbondSlashingValsetsWindow
	}
	return 0
}

func (x *Params) GetSlashFractionBadEthSignature() []byte {
	if x != nil {
		return x.SlashFractionBadEthSignature
	}
	return nil
}

func (x *Params) GetValsetReward() *v1beta1.Coin {
	if x != nil {
		return x.ValsetReward
	}
	return nil
}

func (x *Params) GetBridgeActive() bool {
	if x != nil {
		return x.BridgeActive
	}
	return false
}

func (x *Params) GetEthereumBlacklist() []string {
	if x != nil {
		return x.EthereumBlacklist
	}
	return nil
}

func (x *Params) GetMinChainFeeBasisPoints() uint64 {
	if x != nil {
		return x.MinChainFeeBasisPoints
	}
	return 0
}

func (x *Params) GetChainFeeAuctionPoolFraction() string {
	if x != nil {
		return x.ChainFeeAuctionPoolFraction
	}
	return ""
}

// GenesisState struct, containing all persistant data required by the Gravity
// module
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params                 *Params                      `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	GravityNonces          *GravityNonces               `protobuf:"bytes,2,opt,name=gravity_nonces,json=gravityNonces,proto3" json:"gravity_nonces,omitempty"`
	Valsets                []*Valset                    `protobuf:"bytes,3,rep,name=valsets,proto3" json:"valsets,omitempty"`
	ValsetConfirms         []*MsgValsetConfirm          `protobuf:"bytes,4,rep,name=valset_confirms,json=valsetConfirms,proto3" json:"valset_confirms,omitempty"`
	Batches                []*OutgoingTxBatch           `protobuf:"bytes,5,rep,name=batches,proto3" json:"batches,omitempty"`
	BatchConfirms          []*MsgConfirmBatch           `protobuf:"bytes,6,rep,name=batch_confirms,json=batchConfirms,proto3" json:"batch_confirms,omitempty"`
	LogicCalls             []*OutgoingLogicCall         `protobuf:"bytes,7,rep,name=logic_calls,json=logicCalls,proto3" json:"logic_calls,omitempty"`
	LogicCallConfirms      []*MsgConfirmLogicCall       `protobuf:"bytes,8,rep,name=logic_call_confirms,json=logicCallConfirms,proto3" json:"logic_call_confirms,omitempty"`
	Attestations           []*Attestation               `protobuf:"bytes,9,rep,name=attestations,proto3" json:"attestations,omitempty"`
	DelegateKeys           []*MsgSetOrchestratorAddress `protobuf:"bytes,10,rep,name=delegate_keys,json=delegateKeys,proto3" json:"delegate_keys,omitempty"`
	Erc20ToDenoms          []*ERC20ToDenom              `protobuf:"bytes,11,rep,name=erc20_to_denoms,json=erc20ToDenoms,proto3" json:"erc20_to_denoms,omitempty"`
	UnbatchedTransfers     []*OutgoingTransferTx        `protobuf:"bytes,12,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers,omitempty"`
	PendingIbcAutoForwards []*PendingIbcAutoForward     `protobuf:"bytes,13,rep,name=pending_ibc_auto_forwards,json=pendingIbcAutoForwards,proto3" json:"pending_ibc_auto_forwards,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gravity_v1_genesis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_gravity_v1_genesis_proto_rawDescGZIP(), []int{1}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetGravityNonces() *GravityNonces {
	if x != nil {
		return x.GravityNonces
	}
	return nil
}

func (x *GenesisState) GetValsets() []*Valset {
	if x != nil {
		return x.Valsets
	}
	return nil
}

func (x *GenesisState) GetValsetConfirms() []*MsgValsetConfirm {
	if x != nil {
		return x.ValsetConfirms
	}
	return nil
}

func (x *GenesisState) GetBatches() []*OutgoingTxBatch {
	if x != nil {
		return x.Batches
	}
	return nil
}

func (x *GenesisState) GetBatchConfirms() []*MsgConfirmBatch {
	if x != nil {
		return x.BatchConfirms
	}
	return nil
}

func (x *GenesisState) GetLogicCalls() []*OutgoingLogicCall {
	if x != nil {
		return x.LogicCalls
	}
	return nil
}

func (x *GenesisState) GetLogicCallConfirms() []*MsgConfirmLogicCall {
	if x != nil {
		return x.LogicCallConfirms
	}
	return nil
}

func (x *GenesisState) GetAttestations() []*Attestation {
	if x != nil {
		return x.Attestations
	}
	return nil
}

func (x *GenesisState) GetDelegateKeys() []*MsgSetOrchestratorAddress {
	if x != nil {
		return x.DelegateKeys
	}
	return nil
}

func (x *GenesisState) GetErc20ToDenoms() []*ERC20ToDenom {
	if x != nil {
		return x.Erc20ToDenoms
	}
	return nil
}

func (x *GenesisState) GetUnbatchedTransfers() []*OutgoingTransferTx {
	if x != nil {
		return x.UnbatchedTransfers
	}
	return nil
}

func (x *GenesisState) GetPendingIbcAutoForwards() []*PendingIbcAutoForward {
	if x != nil {
		return x.PendingIbcAutoForwards
	}
	return nil
}

// GravityCounters contains the many noces and counters required to maintain the
// bridge state in the genesis
type GravityNonces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the nonce of the last generated validator set
	LatestValsetNonce uint64 `protobuf:"varint,1,opt,name=latest_valset_nonce,json=latestValsetNonce,proto3" json:"latest_valset_nonce,omitempty"`
	// the last observed Gravity.sol contract event nonce
	LastObservedNonce uint64 `protobuf:"varint,2,opt,name=last_observed_nonce,json=lastObservedNonce,proto3" json:"last_observed_nonce,omitempty"`
	// the last valset nonce we have slashed, to prevent double slashing
	LastSlashedValsetNonce uint64 `protobuf:"varint,3,opt,name=last_slashed_valset_nonce,json=lastSlashedValsetNonce,proto3" json:"last_slashed_valset_nonce,omitempty"`
	// the last batch Cosmos chain block that batch slashing has completed for
	// there is an individual batch nonce for each token type so this removes
	// the need to store them all
	LastSlashedBatchBlock uint64 `protobuf:"varint,4,opt,name=last_slashed_batch_block,json=lastSlashedBatchBlock,proto3" json:"last_slashed_batch_block,omitempty"`
	// the last cosmos block that logic call slashing has completed for
	LastSlashedLogicCallBlock uint64 `protobuf:"varint,5,opt,name=last_slashed_logic_call_block,json=lastSlashedLogicCallBlock,proto3" json:"last_slashed_logic_call_block,omitempty"`
	// the last transaction id from the Gravity TX pool, this prevents ID
	// duplication during chain upgrades
	LastTxPoolId uint64 `protobuf:"varint,6,opt,name=last_tx_pool_id,json=lastTxPoolId,proto3" json:"last_tx_pool_id,omitempty"`
	// the last batch id from the Gravity batch pool, this prevents ID duplication
	// during chain upgrades
	LastBatchId uint64 `protobuf:"varint,7,opt,name=last_batch_id,json=lastBatchId,proto3" json:"last_batch_id,omitempty"`
}

func (x *GravityNonces) Reset() {
	*x = GravityNonces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gravity_v1_genesis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravityNonces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravityNonces) ProtoMessage() {}

// Deprecated: Use GravityNonces.ProtoReflect.Descriptor instead.
func (*GravityNonces) Descriptor() ([]byte, []int) {
	return file_gravity_v1_genesis_proto_rawDescGZIP(), []int{2}
}

func (x *GravityNonces) GetLatestValsetNonce() uint64 {
	if x != nil {
		return x.LatestValsetNonce
	}
	return 0
}

func (x *GravityNonces) GetLastObservedNonce() uint64 {
	if x != nil {
		return x.LastObservedNonce
	}
	return 0
}

func (x *GravityNonces) GetLastSlashedValsetNonce() uint64 {
	if x != nil {
		return x.LastSlashedValsetNonce
	}
	return 0
}

func (x *GravityNonces) GetLastSlashedBatchBlock() uint64 {
	if x != nil {
		return x.LastSlashedBatchBlock
	}
	return 0
}

func (x *GravityNonces) GetLastSlashedLogicCallBlock() uint64 {
	if x != nil {
		return x.LastSlashedLogicCallBlock
	}
	return 0
}

func (x *GravityNonces) GetLastTxPoolId() uint64 {
	if x != nil {
		return x.LastTxPoolId
	}
	return 0
}

func (x *GravityNonces) GetLastBatchId() uint64 {
	if x != nil {
		return x.LastBatchId
	}
	return 0
}

var File_gravity_v1_genesis_proto protoreflect.FileDescriptor

var file_gravity_v1_genesis_proto_rawDesc = []byte{
	0x0a, 0x18, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x84, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a,
	0x17, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x15, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x23,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0x52, 0x13, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x6c, 0x61, 0x73,
	0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x12, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x5e, 0x0a, 0x19, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x16, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x43, 0x0a, 0x1e, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x6b, 0x0a, 0x20, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x23,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0x52, 0x1c, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x64, 0x45, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x1f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x1b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x04, 0x80, 0xdc, 0x20, 0x00, 0x22, 0xbf, 0x07, 0x0a, 0x0c, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d,
	0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x07, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x73,
	0x65, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x6c, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x12, 0x3b,
	0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x74,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x72, 0x63, 0x32, 0x30,
	0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x54, 0x6f, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x0d, 0x65, 0x72, 0x63, 0x32, 0x30, 0x54, 0x6f, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x73, 0x12,
	0x55, 0x0a, 0x13, 0x75, 0x6e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x78, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x62, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x62,
	0x63, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x62, 0x63, 0x41, 0x75,
	0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xf0, 0x02, 0x0a, 0x0d, 0x47,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x73,
	0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6c, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x42, 0x8e, 0x01,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x42, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x25, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x47, 0x58, 0x58, 0xaa, 0x02, 0x0a,
	0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x47, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0b, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gravity_v1_genesis_proto_rawDescOnce sync.Once
	file_gravity_v1_genesis_proto_rawDescData = file_gravity_v1_genesis_proto_rawDesc
)

func file_gravity_v1_genesis_proto_rawDescGZIP() []byte {
	file_gravity_v1_genesis_proto_rawDescOnce.Do(func() {
		file_gravity_v1_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_gravity_v1_genesis_proto_rawDescData)
	})
	return file_gravity_v1_genesis_proto_rawDescData
}

var file_gravity_v1_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_gravity_v1_genesis_proto_goTypes = []interface{}{
	(*Params)(nil),                    // 0: gravity.v1.Params
	(*GenesisState)(nil),              // 1: gravity.v1.GenesisState
	(*GravityNonces)(nil),             // 2: gravity.v1.GravityNonces
	(*v1beta1.Coin)(nil),              // 3: cosmos.base.v1beta1.Coin
	(*Valset)(nil),                    // 4: gravity.v1.Valset
	(*MsgValsetConfirm)(nil),          // 5: gravity.v1.MsgValsetConfirm
	(*OutgoingTxBatch)(nil),           // 6: gravity.v1.OutgoingTxBatch
	(*MsgConfirmBatch)(nil),           // 7: gravity.v1.MsgConfirmBatch
	(*OutgoingLogicCall)(nil),         // 8: gravity.v1.OutgoingLogicCall
	(*MsgConfirmLogicCall)(nil),       // 9: gravity.v1.MsgConfirmLogicCall
	(*Attestation)(nil),               // 10: gravity.v1.Attestation
	(*MsgSetOrchestratorAddress)(nil), // 11: gravity.v1.MsgSetOrchestratorAddress
	(*ERC20ToDenom)(nil),              // 12: gravity.v1.ERC20ToDenom
	(*OutgoingTransferTx)(nil),        // 13: gravity.v1.OutgoingTransferTx
	(*PendingIbcAutoForward)(nil),     // 14: gravity.v1.PendingIbcAutoForward
}
var file_gravity_v1_genesis_proto_depIdxs = []int32{
	3,  // 0: gravity.v1.Params.valset_reward:type_name -> cosmos.base.v1beta1.Coin
	0,  // 1: gravity.v1.GenesisState.params:type_name -> gravity.v1.Params
	2,  // 2: gravity.v1.GenesisState.gravity_nonces:type_name -> gravity.v1.GravityNonces
	4,  // 3: gravity.v1.GenesisState.valsets:type_name -> gravity.v1.Valset
	5,  // 4: gravity.v1.GenesisState.valset_confirms:type_name -> gravity.v1.MsgValsetConfirm
	6,  // 5: gravity.v1.GenesisState.batches:type_name -> gravity.v1.OutgoingTxBatch
	7,  // 6: gravity.v1.GenesisState.batch_confirms:type_name -> gravity.v1.MsgConfirmBatch
	8,  // 7: gravity.v1.GenesisState.logic_calls:type_name -> gravity.v1.OutgoingLogicCall
	9,  // 8: gravity.v1.GenesisState.logic_call_confirms:type_name -> gravity.v1.MsgConfirmLogicCall
	10, // 9: gravity.v1.GenesisState.attestations:type_name -> gravity.v1.Attestation
	11, // 10: gravity.v1.GenesisState.delegate_keys:type_name -> gravity.v1.MsgSetOrchestratorAddress
	12, // 11: gravity.v1.GenesisState.erc20_to_denoms:type_name -> gravity.v1.ERC20ToDenom
	13, // 12: gravity.v1.GenesisState.unbatched_transfers:type_name -> gravity.v1.OutgoingTransferTx
	14, // 13: gravity.v1.GenesisState.pending_ibc_auto_forwards:type_name -> gravity.v1.PendingIbcAutoForward
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_gravity_v1_genesis_proto_init() }
func file_gravity_v1_genesis_proto_init() {
	if File_gravity_v1_genesis_proto != nil {
		return
	}
	file_gravity_v1_types_proto_init()
	file_gravity_v1_msgs_proto_init()
	file_gravity_v1_batch_proto_init()
	file_gravity_v1_attestation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gravity_v1_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gravity_v1_genesis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gravity_v1_genesis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravityNonces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gravity_v1_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gravity_v1_genesis_proto_goTypes,
		DependencyIndexes: file_gravity_v1_genesis_proto_depIdxs,
		MessageInfos:      file_gravity_v1_genesis_proto_msgTypes,
	}.Build()
	File_gravity_v1_genesis_proto = out.File
	file_gravity_v1_genesis_proto_rawDesc = nil
	file_gravity_v1_genesis_proto_goTypes = nil
	file_gravity_v1_genesis_proto_depIdxs = nil
}
