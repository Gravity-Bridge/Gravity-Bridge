// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gravity/v1/msgs.proto

package gravityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_ValsetConfirm_FullMethodName              = "/gravity.v1.Msg/ValsetConfirm"
	Msg_SendToEth_FullMethodName                  = "/gravity.v1.Msg/SendToEth"
	Msg_RequestBatch_FullMethodName               = "/gravity.v1.Msg/RequestBatch"
	Msg_ConfirmBatch_FullMethodName               = "/gravity.v1.Msg/ConfirmBatch"
	Msg_ConfirmLogicCall_FullMethodName           = "/gravity.v1.Msg/ConfirmLogicCall"
	Msg_SendToCosmosClaim_FullMethodName          = "/gravity.v1.Msg/SendToCosmosClaim"
	Msg_ExecuteIbcAutoForwards_FullMethodName     = "/gravity.v1.Msg/ExecuteIbcAutoForwards"
	Msg_BatchSendToEthClaim_FullMethodName        = "/gravity.v1.Msg/BatchSendToEthClaim"
	Msg_ValsetUpdateClaim_FullMethodName          = "/gravity.v1.Msg/ValsetUpdateClaim"
	Msg_ERC20DeployedClaim_FullMethodName         = "/gravity.v1.Msg/ERC20DeployedClaim"
	Msg_LogicCallExecutedClaim_FullMethodName     = "/gravity.v1.Msg/LogicCallExecutedClaim"
	Msg_SetOrchestratorAddress_FullMethodName     = "/gravity.v1.Msg/SetOrchestratorAddress"
	Msg_CancelSendToEth_FullMethodName            = "/gravity.v1.Msg/CancelSendToEth"
	Msg_SubmitBadSignatureEvidence_FullMethodName = "/gravity.v1.Msg/SubmitBadSignatureEvidence"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	ValsetConfirm(ctx context.Context, in *MsgValsetConfirm, opts ...grpc.CallOption) (*MsgValsetConfirmResponse, error)
	SendToEth(ctx context.Context, in *MsgSendToEth, opts ...grpc.CallOption) (*MsgSendToEthResponse, error)
	RequestBatch(ctx context.Context, in *MsgRequestBatch, opts ...grpc.CallOption) (*MsgRequestBatchResponse, error)
	ConfirmBatch(ctx context.Context, in *MsgConfirmBatch, opts ...grpc.CallOption) (*MsgConfirmBatchResponse, error)
	ConfirmLogicCall(ctx context.Context, in *MsgConfirmLogicCall, opts ...grpc.CallOption) (*MsgConfirmLogicCallResponse, error)
	SendToCosmosClaim(ctx context.Context, in *MsgSendToCosmosClaim, opts ...grpc.CallOption) (*MsgSendToCosmosClaimResponse, error)
	ExecuteIbcAutoForwards(ctx context.Context, in *MsgExecuteIbcAutoForwards, opts ...grpc.CallOption) (*MsgExecuteIbcAutoForwardsResponse, error)
	BatchSendToEthClaim(ctx context.Context, in *MsgBatchSendToEthClaim, opts ...grpc.CallOption) (*MsgBatchSendToEthClaimResponse, error)
	ValsetUpdateClaim(ctx context.Context, in *MsgValsetUpdatedClaim, opts ...grpc.CallOption) (*MsgValsetUpdatedClaimResponse, error)
	ERC20DeployedClaim(ctx context.Context, in *MsgERC20DeployedClaim, opts ...grpc.CallOption) (*MsgERC20DeployedClaimResponse, error)
	LogicCallExecutedClaim(ctx context.Context, in *MsgLogicCallExecutedClaim, opts ...grpc.CallOption) (*MsgLogicCallExecutedClaimResponse, error)
	SetOrchestratorAddress(ctx context.Context, in *MsgSetOrchestratorAddress, opts ...grpc.CallOption) (*MsgSetOrchestratorAddressResponse, error)
	CancelSendToEth(ctx context.Context, in *MsgCancelSendToEth, opts ...grpc.CallOption) (*MsgCancelSendToEthResponse, error)
	SubmitBadSignatureEvidence(ctx context.Context, in *MsgSubmitBadSignatureEvidence, opts ...grpc.CallOption) (*MsgSubmitBadSignatureEvidenceResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ValsetConfirm(ctx context.Context, in *MsgValsetConfirm, opts ...grpc.CallOption) (*MsgValsetConfirmResponse, error) {
	out := new(MsgValsetConfirmResponse)
	err := c.cc.Invoke(ctx, Msg_ValsetConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToEth(ctx context.Context, in *MsgSendToEth, opts ...grpc.CallOption) (*MsgSendToEthResponse, error) {
	out := new(MsgSendToEthResponse)
	err := c.cc.Invoke(ctx, Msg_SendToEth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBatch(ctx context.Context, in *MsgRequestBatch, opts ...grpc.CallOption) (*MsgRequestBatchResponse, error) {
	out := new(MsgRequestBatchResponse)
	err := c.cc.Invoke(ctx, Msg_RequestBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmBatch(ctx context.Context, in *MsgConfirmBatch, opts ...grpc.CallOption) (*MsgConfirmBatchResponse, error) {
	out := new(MsgConfirmBatchResponse)
	err := c.cc.Invoke(ctx, Msg_ConfirmBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmLogicCall(ctx context.Context, in *MsgConfirmLogicCall, opts ...grpc.CallOption) (*MsgConfirmLogicCallResponse, error) {
	out := new(MsgConfirmLogicCallResponse)
	err := c.cc.Invoke(ctx, Msg_ConfirmLogicCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToCosmosClaim(ctx context.Context, in *MsgSendToCosmosClaim, opts ...grpc.CallOption) (*MsgSendToCosmosClaimResponse, error) {
	out := new(MsgSendToCosmosClaimResponse)
	err := c.cc.Invoke(ctx, Msg_SendToCosmosClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteIbcAutoForwards(ctx context.Context, in *MsgExecuteIbcAutoForwards, opts ...grpc.CallOption) (*MsgExecuteIbcAutoForwardsResponse, error) {
	out := new(MsgExecuteIbcAutoForwardsResponse)
	err := c.cc.Invoke(ctx, Msg_ExecuteIbcAutoForwards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BatchSendToEthClaim(ctx context.Context, in *MsgBatchSendToEthClaim, opts ...grpc.CallOption) (*MsgBatchSendToEthClaimResponse, error) {
	out := new(MsgBatchSendToEthClaimResponse)
	err := c.cc.Invoke(ctx, Msg_BatchSendToEthClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ValsetUpdateClaim(ctx context.Context, in *MsgValsetUpdatedClaim, opts ...grpc.CallOption) (*MsgValsetUpdatedClaimResponse, error) {
	out := new(MsgValsetUpdatedClaimResponse)
	err := c.cc.Invoke(ctx, Msg_ValsetUpdateClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ERC20DeployedClaim(ctx context.Context, in *MsgERC20DeployedClaim, opts ...grpc.CallOption) (*MsgERC20DeployedClaimResponse, error) {
	out := new(MsgERC20DeployedClaimResponse)
	err := c.cc.Invoke(ctx, Msg_ERC20DeployedClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LogicCallExecutedClaim(ctx context.Context, in *MsgLogicCallExecutedClaim, opts ...grpc.CallOption) (*MsgLogicCallExecutedClaimResponse, error) {
	out := new(MsgLogicCallExecutedClaimResponse)
	err := c.cc.Invoke(ctx, Msg_LogicCallExecutedClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetOrchestratorAddress(ctx context.Context, in *MsgSetOrchestratorAddress, opts ...grpc.CallOption) (*MsgSetOrchestratorAddressResponse, error) {
	out := new(MsgSetOrchestratorAddressResponse)
	err := c.cc.Invoke(ctx, Msg_SetOrchestratorAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSendToEth(ctx context.Context, in *MsgCancelSendToEth, opts ...grpc.CallOption) (*MsgCancelSendToEthResponse, error) {
	out := new(MsgCancelSendToEthResponse)
	err := c.cc.Invoke(ctx, Msg_CancelSendToEth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitBadSignatureEvidence(ctx context.Context, in *MsgSubmitBadSignatureEvidence, opts ...grpc.CallOption) (*MsgSubmitBadSignatureEvidenceResponse, error) {
	out := new(MsgSubmitBadSignatureEvidenceResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitBadSignatureEvidence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	ValsetConfirm(context.Context, *MsgValsetConfirm) (*MsgValsetConfirmResponse, error)
	SendToEth(context.Context, *MsgSendToEth) (*MsgSendToEthResponse, error)
	RequestBatch(context.Context, *MsgRequestBatch) (*MsgRequestBatchResponse, error)
	ConfirmBatch(context.Context, *MsgConfirmBatch) (*MsgConfirmBatchResponse, error)
	ConfirmLogicCall(context.Context, *MsgConfirmLogicCall) (*MsgConfirmLogicCallResponse, error)
	SendToCosmosClaim(context.Context, *MsgSendToCosmosClaim) (*MsgSendToCosmosClaimResponse, error)
	ExecuteIbcAutoForwards(context.Context, *MsgExecuteIbcAutoForwards) (*MsgExecuteIbcAutoForwardsResponse, error)
	BatchSendToEthClaim(context.Context, *MsgBatchSendToEthClaim) (*MsgBatchSendToEthClaimResponse, error)
	ValsetUpdateClaim(context.Context, *MsgValsetUpdatedClaim) (*MsgValsetUpdatedClaimResponse, error)
	ERC20DeployedClaim(context.Context, *MsgERC20DeployedClaim) (*MsgERC20DeployedClaimResponse, error)
	LogicCallExecutedClaim(context.Context, *MsgLogicCallExecutedClaim) (*MsgLogicCallExecutedClaimResponse, error)
	SetOrchestratorAddress(context.Context, *MsgSetOrchestratorAddress) (*MsgSetOrchestratorAddressResponse, error)
	CancelSendToEth(context.Context, *MsgCancelSendToEth) (*MsgCancelSendToEthResponse, error)
	SubmitBadSignatureEvidence(context.Context, *MsgSubmitBadSignatureEvidence) (*MsgSubmitBadSignatureEvidenceResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) ValsetConfirm(context.Context, *MsgValsetConfirm) (*MsgValsetConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirm not implemented")
}
func (UnimplementedMsgServer) SendToEth(context.Context, *MsgSendToEth) (*MsgSendToEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToEth not implemented")
}
func (UnimplementedMsgServer) RequestBatch(context.Context, *MsgRequestBatch) (*MsgRequestBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBatch not implemented")
}
func (UnimplementedMsgServer) ConfirmBatch(context.Context, *MsgConfirmBatch) (*MsgConfirmBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBatch not implemented")
}
func (UnimplementedMsgServer) ConfirmLogicCall(context.Context, *MsgConfirmLogicCall) (*MsgConfirmLogicCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmLogicCall not implemented")
}
func (UnimplementedMsgServer) SendToCosmosClaim(context.Context, *MsgSendToCosmosClaim) (*MsgSendToCosmosClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToCosmosClaim not implemented")
}
func (UnimplementedMsgServer) ExecuteIbcAutoForwards(context.Context, *MsgExecuteIbcAutoForwards) (*MsgExecuteIbcAutoForwardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteIbcAutoForwards not implemented")
}
func (UnimplementedMsgServer) BatchSendToEthClaim(context.Context, *MsgBatchSendToEthClaim) (*MsgBatchSendToEthClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSendToEthClaim not implemented")
}
func (UnimplementedMsgServer) ValsetUpdateClaim(context.Context, *MsgValsetUpdatedClaim) (*MsgValsetUpdatedClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetUpdateClaim not implemented")
}
func (UnimplementedMsgServer) ERC20DeployedClaim(context.Context, *MsgERC20DeployedClaim) (*MsgERC20DeployedClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20DeployedClaim not implemented")
}
func (UnimplementedMsgServer) LogicCallExecutedClaim(context.Context, *MsgLogicCallExecutedClaim) (*MsgLogicCallExecutedClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicCallExecutedClaim not implemented")
}
func (UnimplementedMsgServer) SetOrchestratorAddress(context.Context, *MsgSetOrchestratorAddress) (*MsgSetOrchestratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrchestratorAddress not implemented")
}
func (UnimplementedMsgServer) CancelSendToEth(context.Context, *MsgCancelSendToEth) (*MsgCancelSendToEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendToEth not implemented")
}
func (UnimplementedMsgServer) SubmitBadSignatureEvidence(context.Context, *MsgSubmitBadSignatureEvidence) (*MsgSubmitBadSignatureEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBadSignatureEvidence not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_ValsetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValsetConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValsetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ValsetConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValsetConfirm(ctx, req.(*MsgValsetConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendToEth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToEth(ctx, req.(*MsgSendToEth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RequestBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBatch(ctx, req.(*MsgRequestBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ConfirmBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmBatch(ctx, req.(*MsgConfirmBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmLogicCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmLogicCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmLogicCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ConfirmLogicCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmLogicCall(ctx, req.(*MsgConfirmLogicCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToCosmosClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToCosmosClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToCosmosClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendToCosmosClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToCosmosClaim(ctx, req.(*MsgSendToCosmosClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteIbcAutoForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteIbcAutoForwards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteIbcAutoForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ExecuteIbcAutoForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteIbcAutoForwards(ctx, req.(*MsgExecuteIbcAutoForwards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BatchSendToEthClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBatchSendToEthClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BatchSendToEthClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BatchSendToEthClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BatchSendToEthClaim(ctx, req.(*MsgBatchSendToEthClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ValsetUpdateClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValsetUpdatedClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValsetUpdateClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ValsetUpdateClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValsetUpdateClaim(ctx, req.(*MsgValsetUpdatedClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ERC20DeployedClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgERC20DeployedClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ERC20DeployedClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ERC20DeployedClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ERC20DeployedClaim(ctx, req.(*MsgERC20DeployedClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LogicCallExecutedClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLogicCallExecutedClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LogicCallExecutedClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_LogicCallExecutedClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LogicCallExecutedClaim(ctx, req.(*MsgLogicCallExecutedClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetOrchestratorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOrchestratorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOrchestratorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetOrchestratorAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOrchestratorAddress(ctx, req.(*MsgSetOrchestratorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSendToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSendToEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSendToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CancelSendToEth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSendToEth(ctx, req.(*MsgCancelSendToEth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitBadSignatureEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBadSignatureEvidence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBadSignatureEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitBadSignatureEvidence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBadSignatureEvidence(ctx, req.(*MsgSubmitBadSignatureEvidence))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValsetConfirm",
			Handler:    _Msg_ValsetConfirm_Handler,
		},
		{
			MethodName: "SendToEth",
			Handler:    _Msg_SendToEth_Handler,
		},
		{
			MethodName: "RequestBatch",
			Handler:    _Msg_RequestBatch_Handler,
		},
		{
			MethodName: "ConfirmBatch",
			Handler:    _Msg_ConfirmBatch_Handler,
		},
		{
			MethodName: "ConfirmLogicCall",
			Handler:    _Msg_ConfirmLogicCall_Handler,
		},
		{
			MethodName: "SendToCosmosClaim",
			Handler:    _Msg_SendToCosmosClaim_Handler,
		},
		{
			MethodName: "ExecuteIbcAutoForwards",
			Handler:    _Msg_ExecuteIbcAutoForwards_Handler,
		},
		{
			MethodName: "BatchSendToEthClaim",
			Handler:    _Msg_BatchSendToEthClaim_Handler,
		},
		{
			MethodName: "ValsetUpdateClaim",
			Handler:    _Msg_ValsetUpdateClaim_Handler,
		},
		{
			MethodName: "ERC20DeployedClaim",
			Handler:    _Msg_ERC20DeployedClaim_Handler,
		},
		{
			MethodName: "LogicCallExecutedClaim",
			Handler:    _Msg_LogicCallExecutedClaim_Handler,
		},
		{
			MethodName: "SetOrchestratorAddress",
			Handler:    _Msg_SetOrchestratorAddress_Handler,
		},
		{
			MethodName: "CancelSendToEth",
			Handler:    _Msg_CancelSendToEth_Handler,
		},
		{
			MethodName: "SubmitBadSignatureEvidence",
			Handler:    _Msg_SubmitBadSignatureEvidence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity/v1/msgs.proto",
}
