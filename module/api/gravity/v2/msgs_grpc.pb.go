// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gravity/v2/msgs.proto

package gravityv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParamsProposal_FullMethodName = "/gravity.v2.Msg/UpdateParamsProposal"
	Msg_IBCMetadataProposal_FullMethodName  = "/gravity.v2.Msg/IBCMetadataProposal"
	Msg_AirdropProposal_FullMethodName      = "/gravity.v2.Msg/AirdropProposal"
	Msg_UnhaltBridgeProposal_FullMethodName = "/gravity.v2.Msg/UnhaltBridgeProposal"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	UpdateParamsProposal(ctx context.Context, in *MsgUpdateParamsProposal, opts ...grpc.CallOption) (*MsgUpdateParamsProposalResponse, error)
	IBCMetadataProposal(ctx context.Context, in *MsgIBCMetadataProposal, opts ...grpc.CallOption) (*MsgIBCMetadataProposalResponse, error)
	AirdropProposal(ctx context.Context, in *MsgAirdropProposal, opts ...grpc.CallOption) (*MsgAirdropProposalResponse, error)
	UnhaltBridgeProposal(ctx context.Context, in *MsgUnhaltBridgeProposal, opts ...grpc.CallOption) (*MsgUnhaltBridgeProposalResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParamsProposal(ctx context.Context, in *MsgUpdateParamsProposal, opts ...grpc.CallOption) (*MsgUpdateParamsProposalResponse, error) {
	out := new(MsgUpdateParamsProposalResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParamsProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IBCMetadataProposal(ctx context.Context, in *MsgIBCMetadataProposal, opts ...grpc.CallOption) (*MsgIBCMetadataProposalResponse, error) {
	out := new(MsgIBCMetadataProposalResponse)
	err := c.cc.Invoke(ctx, Msg_IBCMetadataProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AirdropProposal(ctx context.Context, in *MsgAirdropProposal, opts ...grpc.CallOption) (*MsgAirdropProposalResponse, error) {
	out := new(MsgAirdropProposalResponse)
	err := c.cc.Invoke(ctx, Msg_AirdropProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnhaltBridgeProposal(ctx context.Context, in *MsgUnhaltBridgeProposal, opts ...grpc.CallOption) (*MsgUnhaltBridgeProposalResponse, error) {
	out := new(MsgUnhaltBridgeProposalResponse)
	err := c.cc.Invoke(ctx, Msg_UnhaltBridgeProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	UpdateParamsProposal(context.Context, *MsgUpdateParamsProposal) (*MsgUpdateParamsProposalResponse, error)
	IBCMetadataProposal(context.Context, *MsgIBCMetadataProposal) (*MsgIBCMetadataProposalResponse, error)
	AirdropProposal(context.Context, *MsgAirdropProposal) (*MsgAirdropProposalResponse, error)
	UnhaltBridgeProposal(context.Context, *MsgUnhaltBridgeProposal) (*MsgUnhaltBridgeProposalResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParamsProposal(context.Context, *MsgUpdateParamsProposal) (*MsgUpdateParamsProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParamsProposal not implemented")
}
func (UnimplementedMsgServer) IBCMetadataProposal(context.Context, *MsgIBCMetadataProposal) (*MsgIBCMetadataProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCMetadataProposal not implemented")
}
func (UnimplementedMsgServer) AirdropProposal(context.Context, *MsgAirdropProposal) (*MsgAirdropProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirdropProposal not implemented")
}
func (UnimplementedMsgServer) UnhaltBridgeProposal(context.Context, *MsgUnhaltBridgeProposal) (*MsgUnhaltBridgeProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnhaltBridgeProposal not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParamsProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParamsProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParamsProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParamsProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParamsProposal(ctx, req.(*MsgUpdateParamsProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IBCMetadataProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIBCMetadataProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IBCMetadataProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_IBCMetadataProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IBCMetadataProposal(ctx, req.(*MsgIBCMetadataProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AirdropProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAirdropProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AirdropProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AirdropProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AirdropProposal(ctx, req.(*MsgAirdropProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnhaltBridgeProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnhaltBridgeProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnhaltBridgeProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnhaltBridgeProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnhaltBridgeProposal(ctx, req.(*MsgUnhaltBridgeProposal))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParamsProposal",
			Handler:    _Msg_UpdateParamsProposal_Handler,
		},
		{
			MethodName: "IBCMetadataProposal",
			Handler:    _Msg_IBCMetadataProposal_Handler,
		},
		{
			MethodName: "AirdropProposal",
			Handler:    _Msg_AirdropProposal_Handler,
		},
		{
			MethodName: "UnhaltBridgeProposal",
			Handler:    _Msg_UnhaltBridgeProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity/v2/msgs.proto",
}
