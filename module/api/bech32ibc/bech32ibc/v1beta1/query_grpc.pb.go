// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bech32ibc/bech32ibc/v1beta1/query.proto

package bech32ibcv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_HrpIbcRecords_FullMethodName = "/bech32ibc.bech32ibc.v1beta1.Query/HrpIbcRecords"
	Query_HrpIbcRecord_FullMethodName  = "/bech32ibc.bech32ibc.v1beta1.Query/HrpIbcRecord"
	Query_NativeHrp_FullMethodName     = "/bech32ibc.bech32ibc.v1beta1.Query/NativeHrp"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// HrpIbcRecords returns to full list of records
	HrpIbcRecords(ctx context.Context, in *QueryHrpIbcRecordsRequest, opts ...grpc.CallOption) (*QueryHrpIbcRecordsResponse, error)
	// HrpIbcRecord returns the record for a requested HRP
	HrpIbcRecord(ctx context.Context, in *QueryHrpIbcRecordRequest, opts ...grpc.CallOption) (*QueryHrpIbcRecordResponse, error)
	// NativeHrp returns the chain's native HRP
	NativeHrp(ctx context.Context, in *QueryNativeHrpRequest, opts ...grpc.CallOption) (*QueryNativeHrpResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) HrpIbcRecords(ctx context.Context, in *QueryHrpIbcRecordsRequest, opts ...grpc.CallOption) (*QueryHrpIbcRecordsResponse, error) {
	out := new(QueryHrpIbcRecordsResponse)
	err := c.cc.Invoke(ctx, Query_HrpIbcRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HrpIbcRecord(ctx context.Context, in *QueryHrpIbcRecordRequest, opts ...grpc.CallOption) (*QueryHrpIbcRecordResponse, error) {
	out := new(QueryHrpIbcRecordResponse)
	err := c.cc.Invoke(ctx, Query_HrpIbcRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NativeHrp(ctx context.Context, in *QueryNativeHrpRequest, opts ...grpc.CallOption) (*QueryNativeHrpResponse, error) {
	out := new(QueryNativeHrpResponse)
	err := c.cc.Invoke(ctx, Query_NativeHrp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// HrpIbcRecords returns to full list of records
	HrpIbcRecords(context.Context, *QueryHrpIbcRecordsRequest) (*QueryHrpIbcRecordsResponse, error)
	// HrpIbcRecord returns the record for a requested HRP
	HrpIbcRecord(context.Context, *QueryHrpIbcRecordRequest) (*QueryHrpIbcRecordResponse, error)
	// NativeHrp returns the chain's native HRP
	NativeHrp(context.Context, *QueryNativeHrpRequest) (*QueryNativeHrpResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) HrpIbcRecords(context.Context, *QueryHrpIbcRecordsRequest) (*QueryHrpIbcRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HrpIbcRecords not implemented")
}
func (UnimplementedQueryServer) HrpIbcRecord(context.Context, *QueryHrpIbcRecordRequest) (*QueryHrpIbcRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HrpIbcRecord not implemented")
}
func (UnimplementedQueryServer) NativeHrp(context.Context, *QueryNativeHrpRequest) (*QueryNativeHrpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativeHrp not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_HrpIbcRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHrpIbcRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HrpIbcRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HrpIbcRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HrpIbcRecords(ctx, req.(*QueryHrpIbcRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HrpIbcRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHrpIbcRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HrpIbcRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HrpIbcRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HrpIbcRecord(ctx, req.(*QueryHrpIbcRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NativeHrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNativeHrpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NativeHrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NativeHrp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NativeHrp(ctx, req.(*QueryNativeHrpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bech32ibc.bech32ibc.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HrpIbcRecords",
			Handler:    _Query_HrpIbcRecords_Handler,
		},
		{
			MethodName: "HrpIbcRecord",
			Handler:    _Query_HrpIbcRecord_Handler,
		},
		{
			MethodName: "NativeHrp",
			Handler:    _Query_NativeHrp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bech32ibc/bech32ibc/v1beta1/query.proto",
}
