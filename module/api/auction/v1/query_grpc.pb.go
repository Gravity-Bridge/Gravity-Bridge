// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: auction/v1/query.proto

package auctionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName              = "/auction.v1.Query/Params"
	Query_AuctionPeriod_FullMethodName       = "/auction.v1.Query/AuctionPeriod"
	Query_Auctions_FullMethodName            = "/auction.v1.Query/Auctions"
	Query_AuctionById_FullMethodName         = "/auction.v1.Query/AuctionById"
	Query_AuctionByDenom_FullMethodName      = "/auction.v1.Query/AuctionByDenom"
	Query_AllAuctionsByBidder_FullMethodName = "/auction.v1.Query/AllAuctionsByBidder"
	Query_AuctionPool_FullMethodName         = "/auction.v1.Query/AuctionPool"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the current module parameters (decided by governance)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AuctionPeriod returns the current active auction period, or a future one if
	// no period is active
	AuctionPeriod(ctx context.Context, in *QueryAuctionPeriodRequest, opts ...grpc.CallOption) (*QueryAuctionPeriodResponse, error)
	// Auctions returns all current active auctions
	Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error)
	// AuctionById returns an open auction given by its `id`
	AuctionById(ctx context.Context, in *QueryAuctionByIdRequest, opts ...grpc.CallOption) (*QueryAuctionByIdResponse, error)
	// AuctionByDenom returns an open auction given by its `denom`
	AuctionByDenom(ctx context.Context, in *QueryAuctionByDenomRequest, opts ...grpc.CallOption) (*QueryAuctionByDenomResponse, error)
	// AllAuctionsByBidder returns all open auctions with the given highest bidder
	// address
	AllAuctionsByBidder(ctx context.Context, in *QueryAllAuctionsByBidderRequest, opts ...grpc.CallOption) (*QueryAllAuctionsByBidderResponse, error)
	// AuctionPool returns the auction pool account address and the tokens which
	// will be up for auction next, (but does not return any amounts from auctions
	// with no bidder)
	AuctionPool(ctx context.Context, in *QueryAuctionPoolRequest, opts ...grpc.CallOption) (*QueryAuctionPoolResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionPeriod(ctx context.Context, in *QueryAuctionPeriodRequest, opts ...grpc.CallOption) (*QueryAuctionPeriodResponse, error) {
	out := new(QueryAuctionPeriodResponse)
	err := c.cc.Invoke(ctx, Query_AuctionPeriod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error) {
	out := new(QueryAuctionsResponse)
	err := c.cc.Invoke(ctx, Query_Auctions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionById(ctx context.Context, in *QueryAuctionByIdRequest, opts ...grpc.CallOption) (*QueryAuctionByIdResponse, error) {
	out := new(QueryAuctionByIdResponse)
	err := c.cc.Invoke(ctx, Query_AuctionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionByDenom(ctx context.Context, in *QueryAuctionByDenomRequest, opts ...grpc.CallOption) (*QueryAuctionByDenomResponse, error) {
	out := new(QueryAuctionByDenomResponse)
	err := c.cc.Invoke(ctx, Query_AuctionByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllAuctionsByBidder(ctx context.Context, in *QueryAllAuctionsByBidderRequest, opts ...grpc.CallOption) (*QueryAllAuctionsByBidderResponse, error) {
	out := new(QueryAllAuctionsByBidderResponse)
	err := c.cc.Invoke(ctx, Query_AllAuctionsByBidder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionPool(ctx context.Context, in *QueryAuctionPoolRequest, opts ...grpc.CallOption) (*QueryAuctionPoolResponse, error) {
	out := new(QueryAuctionPoolResponse)
	err := c.cc.Invoke(ctx, Query_AuctionPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params returns the current module parameters (decided by governance)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AuctionPeriod returns the current active auction period, or a future one if
	// no period is active
	AuctionPeriod(context.Context, *QueryAuctionPeriodRequest) (*QueryAuctionPeriodResponse, error)
	// Auctions returns all current active auctions
	Auctions(context.Context, *QueryAuctionsRequest) (*QueryAuctionsResponse, error)
	// AuctionById returns an open auction given by its `id`
	AuctionById(context.Context, *QueryAuctionByIdRequest) (*QueryAuctionByIdResponse, error)
	// AuctionByDenom returns an open auction given by its `denom`
	AuctionByDenom(context.Context, *QueryAuctionByDenomRequest) (*QueryAuctionByDenomResponse, error)
	// AllAuctionsByBidder returns all open auctions with the given highest bidder
	// address
	AllAuctionsByBidder(context.Context, *QueryAllAuctionsByBidderRequest) (*QueryAllAuctionsByBidderResponse, error)
	// AuctionPool returns the auction pool account address and the tokens which
	// will be up for auction next, (but does not return any amounts from auctions
	// with no bidder)
	AuctionPool(context.Context, *QueryAuctionPoolRequest) (*QueryAuctionPoolResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) AuctionPeriod(context.Context, *QueryAuctionPeriodRequest) (*QueryAuctionPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionPeriod not implemented")
}
func (UnimplementedQueryServer) Auctions(context.Context, *QueryAuctionsRequest) (*QueryAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auctions not implemented")
}
func (UnimplementedQueryServer) AuctionById(context.Context, *QueryAuctionByIdRequest) (*QueryAuctionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionById not implemented")
}
func (UnimplementedQueryServer) AuctionByDenom(context.Context, *QueryAuctionByDenomRequest) (*QueryAuctionByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionByDenom not implemented")
}
func (UnimplementedQueryServer) AllAuctionsByBidder(context.Context, *QueryAllAuctionsByBidderRequest) (*QueryAllAuctionsByBidderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAuctionsByBidder not implemented")
}
func (UnimplementedQueryServer) AuctionPool(context.Context, *QueryAuctionPoolRequest) (*QueryAuctionPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionPool not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AuctionPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionPeriod(ctx, req.(*QueryAuctionPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Auctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Auctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Auctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Auctions(ctx, req.(*QueryAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AuctionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionById(ctx, req.(*QueryAuctionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AuctionByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionByDenom(ctx, req.(*QueryAuctionByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllAuctionsByBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAuctionsByBidderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllAuctionsByBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllAuctionsByBidder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllAuctionsByBidder(ctx, req.(*QueryAllAuctionsByBidderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AuctionPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionPool(ctx, req.(*QueryAuctionPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auction.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AuctionPeriod",
			Handler:    _Query_AuctionPeriod_Handler,
		},
		{
			MethodName: "Auctions",
			Handler:    _Query_Auctions_Handler,
		},
		{
			MethodName: "AuctionById",
			Handler:    _Query_AuctionById_Handler,
		},
		{
			MethodName: "AuctionByDenom",
			Handler:    _Query_AuctionByDenom_Handler,
		},
		{
			MethodName: "AllAuctionsByBidder",
			Handler:    _Query_AllAuctionsByBidder_Handler,
		},
		{
			MethodName: "AuctionPool",
			Handler:    _Query_AuctionPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auction/v1/query.proto",
}
