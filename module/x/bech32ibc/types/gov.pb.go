// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bech32ibc/v1beta1/gov.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UpdateHrpIBCRecordProposal is a gov Content type for adding a new record
// between a bech32 prefix and an IBC (port, channel).
// It can be used to add a new record to the set. It can also be.
// used to update the IBC channel to associate with a specific denom. If channel
// is set to "", it will remove the record from the set.
type UpdateHrpIbcChannelProposal struct {
	Title             string        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description       string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Hrp               string        `protobuf:"bytes,3,opt,name=hrp,proto3" json:"hrp,omitempty" yaml:"hrp"`
	SourceChannel     string        `protobuf:"bytes,4,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty" yaml:"source_channel"`
	IcsToHeightOffset uint64        `protobuf:"varint,5,opt,name=ics_to_height_offset,json=icsToHeightOffset,proto3" json:"ics_to_height_offset,omitempty"`
	IcsToTimeOffset   time.Duration `protobuf:"bytes,6,opt,name=ics_to_time_offset,json=icsToTimeOffset,proto3,stdduration" json:"to_time_offset,omitempty" yaml:"to_time_offset"`
}

func (m *UpdateHrpIbcChannelProposal) Reset()      { *m = UpdateHrpIbcChannelProposal{} }
func (*UpdateHrpIbcChannelProposal) ProtoMessage() {}
func (*UpdateHrpIbcChannelProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f7c8abba2b4a209, []int{0}
}
func (m *UpdateHrpIbcChannelProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateHrpIbcChannelProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateHrpIbcChannelProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateHrpIbcChannelProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHrpIbcChannelProposal.Merge(m, src)
}
func (m *UpdateHrpIbcChannelProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateHrpIbcChannelProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHrpIbcChannelProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHrpIbcChannelProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpdateHrpIbcChannelProposal)(nil), "bech32ibc.bech32ibc.v1beta1.UpdateHrpIbcChannelProposal")
}

func init() { proto.RegisterFile("bech32ibc/v1beta1/gov.proto", fileDescriptor_8f7c8abba2b4a209) }

var fileDescriptor_8f7c8abba2b4a209 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x7d, 0xf4, 0x8f, 0xc4, 0xb5, 0x14, 0x38, 0x15, 0xe4, 0xb6, 0x92, 0x2f, 0xf2, 0x80,
	0x32, 0x80, 0x4f, 0x6d, 0x17, 0x54, 0x09, 0x09, 0x02, 0x12, 0x65, 0x02, 0x59, 0x65, 0x81, 0x21,
	0xb2, 0xcf, 0x17, 0xfb, 0x24, 0x3b, 0xef, 0xe9, 0x7c, 0x8e, 0xc8, 0x07, 0x40, 0x62, 0x64, 0xec,
	0x98, 0x99, 0x4f, 0xd2, 0xb1, 0x23, 0x93, 0x41, 0xc9, 0x82, 0x18, 0xf3, 0x09, 0x50, 0xee, 0x52,
	0xa5, 0x61, 0xbb, 0xbb, 0xdf, 0xef, 0xb1, 0x9e, 0xf7, 0x95, 0xf1, 0x51, 0x2a, 0x78, 0x71, 0x7a,
	0x22, 0x53, 0xce, 0x46, 0xc7, 0xa9, 0x30, 0xc9, 0x31, 0xcb, 0x61, 0x14, 0x29, 0x0d, 0x06, 0xc8,
	0x0a, 0x46, 0xab, 0xd3, 0x52, 0x3b, 0xdc, 0xcf, 0x21, 0x07, 0xeb, 0xb1, 0xc5, 0xc9, 0x45, 0x0e,
	0x83, 0x1c, 0x20, 0x2f, 0x05, 0xb3, 0xb7, 0xb4, 0x19, 0xb0, 0xac, 0xd1, 0x89, 0x91, 0x30, 0x74,
	0x3c, 0xfc, 0xb1, 0x81, 0x8f, 0x3e, 0xaa, 0x2c, 0x31, 0xe2, 0x5c, 0xab, 0x77, 0x29, 0x7f, 0x5d,
	0x24, 0xc3, 0xa1, 0x28, 0x3f, 0x68, 0x50, 0x50, 0x27, 0x25, 0x79, 0x82, 0xb7, 0x8c, 0x34, 0xa5,
	0xf0, 0x51, 0x07, 0x75, 0xef, 0xf6, 0x1e, 0xcc, 0x5b, 0xba, 0x3b, 0x4e, 0xaa, 0xf2, 0x2c, 0xb4,
	0xcf, 0x61, 0xec, 0x30, 0x79, 0x8e, 0x77, 0x32, 0x51, 0x73, 0x2d, 0xd5, 0xe2, 0xe3, 0xfe, 0x1d,
	0x6b, 0x3f, 0x9e, 0xb7, 0x94, 0x38, 0xfb, 0x16, 0x0c, 0xe3, 0xdb, 0x2a, 0xe9, 0xe0, 0x8d, 0x42,
	0x2b, 0x7f, 0xc3, 0x26, 0xf6, 0xe6, 0x2d, 0xc5, 0x2e, 0x51, 0x68, 0x15, 0xc6, 0x0b, 0x44, 0x5e,
	0xe2, 0xbd, 0x1a, 0x1a, 0xcd, 0x45, 0x9f, 0xbb, 0x76, 0xfe, 0xa6, 0x95, 0x0f, 0xe6, 0x2d, 0x7d,
	0xe4, 0xe4, 0x75, 0x1e, 0xc6, 0xf7, 0xdc, 0xc3, 0x72, 0x1a, 0xc2, 0xf0, 0xbe, 0xe4, 0x75, 0xdf,
	0x40, 0xbf, 0x10, 0x32, 0x2f, 0x4c, 0x1f, 0x06, 0x83, 0x5a, 0x18, 0x7f, 0xab, 0x83, 0xba, 0x9b,
	0xf1, 0x43, 0xc9, 0xeb, 0x0b, 0x38, 0xb7, 0xe4, 0xbd, 0x05, 0xe4, 0x2b, 0xc2, 0x64, 0x99, 0x30,
	0xb2, 0x12, 0x37, 0xfe, 0x76, 0x07, 0x75, 0x77, 0x4e, 0x0e, 0x22, 0xb7, 0xd4, 0xe8, 0x66, 0xa9,
	0xd1, 0x9b, 0xe5, 0x52, 0x7b, 0x2f, 0xae, 0x5a, 0xea, 0xfd, 0x6d, 0xa9, 0xbf, 0x1e, 0x7c, 0x0a,
	0x95, 0x34, 0xa2, 0x52, 0x66, 0xbc, 0xaa, 0xbc, 0x6e, 0x84, 0x97, 0xbf, 0x28, 0x8a, 0xef, 0xdb,
	0x26, 0x17, 0xb2, 0x12, 0xae, 0xc7, 0xd9, 0xee, 0xb7, 0x09, 0xf5, 0x2e, 0x27, 0xd4, 0xfb, 0x33,
	0xa1, 0xa8, 0xf7, 0xf9, 0x6a, 0x1a, 0xa0, 0xeb, 0x69, 0x80, 0x7e, 0x4f, 0x03, 0xf4, 0x7d, 0x16,
	0x78, 0xd7, 0xb3, 0xc0, 0xfb, 0x39, 0x0b, 0xbc, 0x4f, 0xaf, 0x72, 0x69, 0x8a, 0x26, 0x8d, 0x38,
	0x54, 0xec, 0xad, 0x4e, 0x46, 0xd2, 0x8c, 0x9f, 0xf5, 0xb4, 0xcc, 0x72, 0xf1, 0xff, 0xb5, 0x82,
	0xac, 0x29, 0x05, 0xfb, 0xc2, 0x56, 0x3f, 0x9a, 0x19, 0x2b, 0x51, 0xa7, 0xdb, 0x76, 0x9a, 0xd3,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x28, 0x8f, 0x0b, 0xd8, 0x82, 0x02, 0x00, 0x00,
}

func (this *UpdateHrpIbcChannelProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateHrpIbcChannelProposal)
	if !ok {
		that2, ok := that.(UpdateHrpIbcChannelProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Hrp != that1.Hrp {
		return false
	}
	if this.SourceChannel != that1.SourceChannel {
		return false
	}
	if this.IcsToHeightOffset != that1.IcsToHeightOffset {
		return false
	}
	if this.IcsToTimeOffset != that1.IcsToTimeOffset {
		return false
	}
	return true
}
func (m *UpdateHrpIbcChannelProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateHrpIbcChannelProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateHrpIbcChannelProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.IcsToTimeOffset, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.IcsToTimeOffset):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGov(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if m.IcsToHeightOffset != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.IcsToHeightOffset))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintGov(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hrp) > 0 {
		i -= len(m.Hrp)
		copy(dAtA[i:], m.Hrp)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Hrp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGov(dAtA []byte, offset int, v uint64) int {
	offset -= sovGov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateHrpIbcChannelProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Hrp)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.IcsToHeightOffset != 0 {
		n += 1 + sovGov(uint64(m.IcsToHeightOffset))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.IcsToTimeOffset)
	n += 1 + l + sovGov(uint64(l))
	return n
}

func sovGov(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGov(x uint64) (n int) {
	return sovGov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateHrpIbcChannelProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateHrpIbcChannelProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateHrpIbcChannelProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hrp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hrp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcsToHeightOffset", wireType)
			}
			m.IcsToHeightOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcsToHeightOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcsToTimeOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.IcsToTimeOffset, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGov(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGov
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGov
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGov
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGov
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGov        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGov          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGov = fmt.Errorf("proto: unexpected end of group")
)
