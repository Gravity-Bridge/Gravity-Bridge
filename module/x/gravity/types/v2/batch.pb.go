// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v2/batch.proto

package v2

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	types "github.com/Gravity-Bridge/Gravity-Bridge/module/x/gravity/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutgoingTransferAndBatch struct {
	Transfer types.OutgoingTransferTx `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer"`
	Batch    types.OutgoingTxBatch    `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch"`
}

func (m *OutgoingTransferAndBatch) Reset()         { *m = OutgoingTransferAndBatch{} }
func (m *OutgoingTransferAndBatch) String() string { return proto.CompactTextString(m) }
func (*OutgoingTransferAndBatch) ProtoMessage()    {}
func (*OutgoingTransferAndBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e4cc0bd525a44d5, []int{0}
}
func (m *OutgoingTransferAndBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingTransferAndBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingTransferAndBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingTransferAndBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingTransferAndBatch.Merge(m, src)
}
func (m *OutgoingTransferAndBatch) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingTransferAndBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingTransferAndBatch.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingTransferAndBatch proto.InternalMessageInfo

func (m *OutgoingTransferAndBatch) GetTransfer() types.OutgoingTransferTx {
	if m != nil {
		return m.Transfer
	}
	return types.OutgoingTransferTx{}
}

func (m *OutgoingTransferAndBatch) GetBatch() types.OutgoingTxBatch {
	if m != nil {
		return m.Batch
	}
	return types.OutgoingTxBatch{}
}

func init() {
	proto.RegisterType((*OutgoingTransferAndBatch)(nil), "gravity.v2.OutgoingTransferAndBatch")
}

func init() { proto.RegisterFile("gravity/v2/batch.proto", fileDescriptor_5e4cc0bd525a44d5) }

var fileDescriptor_5e4cc0bd525a44d5 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x2f, 0x4a, 0x2c,
	0xcb, 0x2c, 0xa9, 0xd4, 0x2f, 0x33, 0xd2, 0x4f, 0x4a, 0x2c, 0x49, 0xce, 0xd0, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x82, 0x8a, 0xeb, 0x95, 0x19, 0x49, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83,
	0x85, 0xf5, 0x41, 0x2c, 0x88, 0x0a, 0x29, 0x84, 0x4e, 0x43, 0x64, 0x9d, 0x4a, 0x53, 0x19, 0xb9,
	0x24, 0xfc, 0x4b, 0x4b, 0xd2, 0xf3, 0x33, 0xf3, 0xd2, 0x43, 0x8a, 0x12, 0xf3, 0x8a, 0xd3, 0x52,
	0x8b, 0x1c, 0xf3, 0x52, 0x9c, 0x40, 0x4a, 0x84, 0x1c, 0xb8, 0x38, 0x4a, 0xa0, 0x62, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x72, 0x7a, 0x70, 0x9b, 0x0c, 0xf5, 0xd0, 0xf5, 0x85, 0x54, 0x38,
	0xb1, 0x9c, 0xb8, 0x27, 0xcf, 0x10, 0x04, 0xd7, 0x25, 0x64, 0xce, 0xc5, 0x0a, 0xb6, 0x4d, 0x82,
	0x09, 0xac, 0x5d, 0x1a, 0xab, 0xf6, 0x0a, 0xb0, 0x6d, 0x50, 0xbd, 0x10, 0xf5, 0x4e, 0x31, 0x27,
	0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c,
	0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xe5, 0x94, 0x9e, 0x59, 0x92, 0x51, 0x9a,
	0xa4, 0x97, 0x9c, 0x9f, 0xab, 0xef, 0x0e, 0x31, 0x4d, 0xd7, 0xa9, 0x28, 0x33, 0x25, 0x3d, 0x15,
	0x9d, 0x9b, 0x9b, 0x9f, 0x52, 0x9a, 0x93, 0xaa, 0x5f, 0xa1, 0x0f, 0xf3, 0x7b, 0x49, 0x65, 0x41,
	0x6a, 0xb1, 0x7e, 0x99, 0x51, 0x12, 0x1b, 0xd8, 0xf3, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x12, 0x18, 0x58, 0xf5, 0x50, 0x01, 0x00, 0x00,
}

func (m *OutgoingTransferAndBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingTransferAndBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingTransferAndBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintBatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutgoingTransferAndBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Transfer.Size()
	n += 1 + l + sovBatch(uint64(l))
	l = m.Batch.Size()
	n += 1 + l + sovBatch(uint64(l))
	return n
}

func sovBatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBatch(x uint64) (n int) {
	return sovBatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutgoingTransferAndBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingTransferAndBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingTransferAndBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Transfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBatch = fmt.Errorf("proto: unexpected end of group")
)
