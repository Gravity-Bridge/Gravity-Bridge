// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v2/query.proto

package v2

import (
	context "context"
	fmt "fmt"
	types "github.com/Gravity-Bridge/Gravity-Bridge/module/x/gravity/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPendingSendToEthV2 struct {
}

func (m *QueryPendingSendToEthV2) Reset()         { *m = QueryPendingSendToEthV2{} }
func (m *QueryPendingSendToEthV2) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSendToEthV2) ProtoMessage()    {}
func (*QueryPendingSendToEthV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_819dc9309e3d0b6f, []int{0}
}
func (m *QueryPendingSendToEthV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSendToEthV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSendToEthV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSendToEthV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSendToEthV2.Merge(m, src)
}
func (m *QueryPendingSendToEthV2) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSendToEthV2) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSendToEthV2.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSendToEthV2 proto.InternalMessageInfo

type QueryPendingSendToEthV2Response struct {
	TransfersInBatches []OutgoingTransferAndBatch `protobuf:"bytes,1,rep,name=transfers_in_batches,json=transfersInBatches,proto3" json:"transfers_in_batches"`
	UnbatchedTransfers []types.OutgoingTransferTx `protobuf:"bytes,2,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers"`
}

func (m *QueryPendingSendToEthV2Response) Reset()         { *m = QueryPendingSendToEthV2Response{} }
func (m *QueryPendingSendToEthV2Response) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSendToEthV2Response) ProtoMessage()    {}
func (*QueryPendingSendToEthV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_819dc9309e3d0b6f, []int{1}
}
func (m *QueryPendingSendToEthV2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSendToEthV2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSendToEthV2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSendToEthV2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSendToEthV2Response.Merge(m, src)
}
func (m *QueryPendingSendToEthV2Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSendToEthV2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSendToEthV2Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSendToEthV2Response proto.InternalMessageInfo

func (m *QueryPendingSendToEthV2Response) GetTransfersInBatches() []OutgoingTransferAndBatch {
	if m != nil {
		return m.TransfersInBatches
	}
	return nil
}

func (m *QueryPendingSendToEthV2Response) GetUnbatchedTransfers() []types.OutgoingTransferTx {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

type QueryPendingSendToEthV2BySender struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *QueryPendingSendToEthV2BySender) Reset()         { *m = QueryPendingSendToEthV2BySender{} }
func (m *QueryPendingSendToEthV2BySender) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSendToEthV2BySender) ProtoMessage()    {}
func (*QueryPendingSendToEthV2BySender) Descriptor() ([]byte, []int) {
	return fileDescriptor_819dc9309e3d0b6f, []int{2}
}
func (m *QueryPendingSendToEthV2BySender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSendToEthV2BySender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSendToEthV2BySender.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSendToEthV2BySender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSendToEthV2BySender.Merge(m, src)
}
func (m *QueryPendingSendToEthV2BySender) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSendToEthV2BySender) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSendToEthV2BySender.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSendToEthV2BySender proto.InternalMessageInfo

func (m *QueryPendingSendToEthV2BySender) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type QueryOutgoingTxBatchesByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryOutgoingTxBatchesByAddrRequest) Reset()         { *m = QueryOutgoingTxBatchesByAddrRequest{} }
func (m *QueryOutgoingTxBatchesByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchesByAddrRequest) ProtoMessage()    {}
func (*QueryOutgoingTxBatchesByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_819dc9309e3d0b6f, []int{3}
}
func (m *QueryOutgoingTxBatchesByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesByAddrRequest.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesByAddrRequest proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryOutgoingTxBatchesByAddrResponse struct {
	Batches []types.OutgoingTxBatch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches"`
}

func (m *QueryOutgoingTxBatchesByAddrResponse) Reset()         { *m = QueryOutgoingTxBatchesByAddrResponse{} }
func (m *QueryOutgoingTxBatchesByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchesByAddrResponse) ProtoMessage()    {}
func (*QueryOutgoingTxBatchesByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_819dc9309e3d0b6f, []int{4}
}
func (m *QueryOutgoingTxBatchesByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesByAddrResponse.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesByAddrResponse proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesByAddrResponse) GetBatches() []types.OutgoingTxBatch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPendingSendToEthV2)(nil), "gravity.v2.QueryPendingSendToEthV2")
	proto.RegisterType((*QueryPendingSendToEthV2Response)(nil), "gravity.v2.QueryPendingSendToEthV2Response")
	proto.RegisterType((*QueryPendingSendToEthV2BySender)(nil), "gravity.v2.QueryPendingSendToEthV2BySender")
	proto.RegisterType((*QueryOutgoingTxBatchesByAddrRequest)(nil), "gravity.v2.QueryOutgoingTxBatchesByAddrRequest")
	proto.RegisterType((*QueryOutgoingTxBatchesByAddrResponse)(nil), "gravity.v2.QueryOutgoingTxBatchesByAddrResponse")
}

func init() { proto.RegisterFile("gravity/v2/query.proto", fileDescriptor_819dc9309e3d0b6f) }

var fileDescriptor_819dc9309e3d0b6f = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xae, 0xc7, 0xd8, 0x84, 0xb9, 0x99, 0x31, 0x4a, 0x81, 0x6c, 0xca, 0x76, 0xa8, 0x40, 0xd4,
	0x6b, 0xe0, 0x02, 0x13, 0x42, 0x0b, 0x42, 0x15, 0x27, 0xa0, 0x14, 0x0e, 0x68, 0x92, 0x95, 0xd6,
	0xc6, 0x8d, 0xb4, 0xd9, 0x5d, 0xec, 0x44, 0x89, 0xa6, 0x5d, 0xf8, 0x05, 0x48, 0x1c, 0xb9, 0xf2,
	0x2f, 0x90, 0x38, 0xef, 0x38, 0x09, 0x09, 0x71, 0x42, 0xa8, 0xe5, 0x87, 0xa0, 0x24, 0x4e, 0x5a,
	0xd6, 0x75, 0xea, 0x4e, 0xf1, 0xf3, 0x7b, 0xdf, 0xf7, 0xbe, 0xef, 0xf9, 0x29, 0x70, 0x95, 0x07,
	0x5e, 0xe4, 0xeb, 0x04, 0x47, 0x0e, 0x3e, 0x08, 0x59, 0x90, 0x34, 0x06, 0x81, 0xd4, 0x12, 0x41,
	0x73, 0xdf, 0x88, 0x9c, 0xda, 0xb8, 0xa6, 0x89, 0xbb, 0x9e, 0xee, 0xf5, 0xf3, 0x9a, 0xda, 0x24,
	0x76, 0xf2, 0xfe, 0x36, 0x97, 0x92, 0xef, 0x31, 0xec, 0x0d, 0x7c, 0xec, 0x09, 0x21, 0xb5, 0xa7,
	0x7d, 0x29, 0x94, 0xc9, 0xae, 0x70, 0xc9, 0x65, 0x76, 0xc4, 0xe9, 0x29, 0xbf, 0xb5, 0x6f, 0xc2,
	0x1b, 0xaf, 0xd3, 0xf6, 0xaf, 0x98, 0xa0, 0xbe, 0xe0, 0x6f, 0x98, 0xa0, 0x1d, 0xf9, 0x5c, 0xf7,
	0xdf, 0x39, 0xf6, 0x4f, 0x00, 0xd7, 0x66, 0xe4, 0xda, 0x4c, 0x0d, 0xa4, 0x50, 0x0c, 0xed, 0xc2,
	0x15, 0x1d, 0x78, 0x42, 0x7d, 0x60, 0x81, 0x22, 0xbe, 0x20, 0x99, 0x1c, 0xa6, 0xaa, 0x60, 0xfd,
	0x52, 0xfd, 0xaa, 0xb3, 0xd9, 0x18, 0xbb, 0x69, 0xbc, 0x0c, 0x35, 0x97, 0xbe, 0xe0, 0x1d, 0x53,
	0xbf, 0x23, 0xa8, 0x9b, 0x56, 0xbb, 0x8b, 0xc7, 0xbf, 0xd7, 0x2a, 0x6d, 0x54, 0xf2, 0xbc, 0x10,
	0x6e, 0xce, 0x82, 0xde, 0xc2, 0x6b, 0xa1, 0xc8, 0x29, 0x29, 0x29, 0xf3, 0xd5, 0x85, 0x8c, 0xdc,
	0x1a, 0x93, 0x37, 0xa7, 0xc8, 0x3b, 0x71, 0x41, 0x5b, 0x12, 0x14, 0x29, 0x65, 0x3f, 0x9a, 0xe9,
	0xcb, 0x4d, 0xd2, 0x80, 0x05, 0x68, 0x15, 0x2e, 0xa9, 0xec, 0x54, 0x05, 0xeb, 0xa0, 0x7e, 0xa5,
	0x6d, 0x22, 0xfb, 0x29, 0xdc, 0xc8, 0xa0, 0x65, 0xbf, 0xd8, 0x68, 0x75, 0x93, 0x1d, 0x4a, 0x83,
	0x36, 0x3b, 0x08, 0x99, 0xd2, 0xa8, 0x0a, 0x97, 0x3d, 0x4a, 0x03, 0xa6, 0x94, 0xc1, 0x17, 0xa1,
	0xdd, 0x83, 0x9b, 0xe7, 0x13, 0x98, 0xc1, 0x6e, 0xc3, 0xe5, 0xff, 0x67, 0x79, 0xeb, 0x4c, 0xbb,
	0xf1, 0xe4, 0x08, 0x0b, 0x84, 0xf3, 0x75, 0x11, 0x5e, 0xce, 0xba, 0xa0, 0x2f, 0x00, 0x5e, 0x6f,
	0x31, 0x3d, 0xed, 0x14, 0x6d, 0x4c, 0xbe, 0xcd, 0x8c, 0x71, 0xd4, 0xee, 0xcd, 0x51, 0x54, 0x48,
	0xb6, 0xb7, 0x3e, 0xfe, 0xf8, 0xfb, 0x79, 0xe1, 0x2e, 0xaa, 0xe3, 0xd3, 0xbb, 0x4d, 0x06, 0x39,
	0x8a, 0xa4, 0x53, 0x24, 0x5a, 0x12, 0xa6, 0xfb, 0x24, 0x72, 0xd0, 0x77, 0x00, 0xef, 0x9c, 0xa9,
	0xae, 0x7c, 0x87, 0x79, 0x04, 0x14, 0xc5, 0x17, 0x53, 0xfb, 0x2c, 0x53, 0xfb, 0x04, 0x6d, 0xcf,
	0xab, 0x96, 0x74, 0x13, 0x92, 0x6f, 0x01, 0x3e, 0xcc, 0xbf, 0x47, 0xe8, 0x1b, 0x80, 0xb5, 0x16,
	0xd3, 0x33, 0x1e, 0x13, 0xe1, 0x29, 0x41, 0xe7, 0xef, 0x4d, 0x6d, 0x6b, 0x7e, 0x80, 0xb1, 0xf1,
	0x38, 0xb3, 0xf1, 0x10, 0x39, 0x63, 0x1b, 0xcd, 0x2e, 0xd3, 0x5e, 0xfe, 0x63, 0xc0, 0xd2, 0xc0,
	0x75, 0x9c, 0xca, 0x4f, 0x97, 0x10, 0x1f, 0x9a, 0x55, 0x3c, 0x72, 0x77, 0x8f, 0x87, 0x16, 0x38,
	0x19, 0x5a, 0xe0, 0xcf, 0xd0, 0x02, 0x9f, 0x46, 0x56, 0xe5, 0x64, 0x64, 0x55, 0x7e, 0x8d, 0xac,
	0xca, 0x7b, 0x97, 0xfb, 0xba, 0x1f, 0x76, 0x1b, 0x3d, 0xb9, 0x8f, 0x5b, 0x39, 0xef, 0x7d, 0x37,
	0xf0, 0x29, 0x67, 0xa7, 0xc3, 0x7d, 0x49, 0xc3, 0x3d, 0x86, 0xe3, 0xb2, 0xbd, 0x4e, 0x06, 0x4c,
	0xe1, 0xc8, 0xe9, 0x2e, 0x65, 0x3f, 0x98, 0x07, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x12,
	0x78, 0xc3, 0xea, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetPendingSendToEthV2(ctx context.Context, in *QueryPendingSendToEthV2, opts ...grpc.CallOption) (*QueryPendingSendToEthV2Response, error)
	GetPendingSendToEthV2BySender(ctx context.Context, in *QueryPendingSendToEthV2BySender, opts ...grpc.CallOption) (*QueryPendingSendToEthV2Response, error)
	GetOutgoingTxBatchesByAddr(ctx context.Context, in *QueryOutgoingTxBatchesByAddrRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesByAddrResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetPendingSendToEthV2(ctx context.Context, in *QueryPendingSendToEthV2, opts ...grpc.CallOption) (*QueryPendingSendToEthV2Response, error) {
	out := new(QueryPendingSendToEthV2Response)
	err := c.cc.Invoke(ctx, "/gravity.v2.Query/GetPendingSendToEthV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingSendToEthV2BySender(ctx context.Context, in *QueryPendingSendToEthV2BySender, opts ...grpc.CallOption) (*QueryPendingSendToEthV2Response, error) {
	out := new(QueryPendingSendToEthV2Response)
	err := c.cc.Invoke(ctx, "/gravity.v2.Query/GetPendingSendToEthV2BySender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOutgoingTxBatchesByAddr(ctx context.Context, in *QueryOutgoingTxBatchesByAddrRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesByAddrResponse, error) {
	out := new(QueryOutgoingTxBatchesByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravity.v2.Query/GetOutgoingTxBatchesByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetPendingSendToEthV2(context.Context, *QueryPendingSendToEthV2) (*QueryPendingSendToEthV2Response, error)
	GetPendingSendToEthV2BySender(context.Context, *QueryPendingSendToEthV2BySender) (*QueryPendingSendToEthV2Response, error)
	GetOutgoingTxBatchesByAddr(context.Context, *QueryOutgoingTxBatchesByAddrRequest) (*QueryOutgoingTxBatchesByAddrResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetPendingSendToEthV2(ctx context.Context, req *QueryPendingSendToEthV2) (*QueryPendingSendToEthV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingSendToEthV2 not implemented")
}
func (*UnimplementedQueryServer) GetPendingSendToEthV2BySender(ctx context.Context, req *QueryPendingSendToEthV2BySender) (*QueryPendingSendToEthV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingSendToEthV2BySender not implemented")
}
func (*UnimplementedQueryServer) GetOutgoingTxBatchesByAddr(ctx context.Context, req *QueryOutgoingTxBatchesByAddrRequest) (*QueryOutgoingTxBatchesByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutgoingTxBatchesByAddr not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetPendingSendToEthV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSendToEthV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingSendToEthV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v2.Query/GetPendingSendToEthV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingSendToEthV2(ctx, req.(*QueryPendingSendToEthV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingSendToEthV2BySender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSendToEthV2BySender)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingSendToEthV2BySender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v2.Query/GetPendingSendToEthV2BySender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingSendToEthV2BySender(ctx, req.(*QueryPendingSendToEthV2BySender))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOutgoingTxBatchesByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingTxBatchesByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOutgoingTxBatchesByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v2.Query/GetOutgoingTxBatchesByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOutgoingTxBatchesByAddr(ctx, req.(*QueryOutgoingTxBatchesByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendingSendToEthV2",
			Handler:    _Query_GetPendingSendToEthV2_Handler,
		},
		{
			MethodName: "GetPendingSendToEthV2BySender",
			Handler:    _Query_GetPendingSendToEthV2BySender_Handler,
		},
		{
			MethodName: "GetOutgoingTxBatchesByAddr",
			Handler:    _Query_GetOutgoingTxBatchesByAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity/v2/query.proto",
}

func (m *QueryPendingSendToEthV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSendToEthV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSendToEthV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPendingSendToEthV2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSendToEthV2Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSendToEthV2Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TransfersInBatches) > 0 {
		for iNdEx := len(m.TransfersInBatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransfersInBatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSendToEthV2BySender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSendToEthV2BySender) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSendToEthV2BySender) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPendingSendToEthV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPendingSendToEthV2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransfersInBatches) > 0 {
		for _, e := range m.TransfersInBatches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingSendToEthV2BySender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutgoingTxBatchesByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutgoingTxBatchesByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPendingSendToEthV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSendToEthV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSendToEthV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSendToEthV2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSendToEthV2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSendToEthV2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersInBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransfersInBatches = append(m.TransfersInBatches, OutgoingTransferAndBatch{})
			if err := m.TransfersInBatches[len(m.TransfersInBatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, types.OutgoingTransferTx{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSendToEthV2BySender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSendToEthV2BySender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSendToEthV2BySender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, types.OutgoingTxBatch{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
