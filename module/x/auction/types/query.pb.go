// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryAuctionPeriodRequest struct {
}

func (m *QueryAuctionPeriodRequest) Reset()         { *m = QueryAuctionPeriodRequest{} }
func (m *QueryAuctionPeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionPeriodRequest) ProtoMessage()    {}
func (*QueryAuctionPeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{2}
}
func (m *QueryAuctionPeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionPeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionPeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionPeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionPeriodRequest.Merge(m, src)
}
func (m *QueryAuctionPeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionPeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionPeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionPeriodRequest proto.InternalMessageInfo

type QueryAuctionPeriodResponse struct {
	AuctionPeriod *AuctionPeriod `protobuf:"bytes,1,opt,name=auction_period,json=auctionPeriod,proto3" json:"auction_period,omitempty"`
}

func (m *QueryAuctionPeriodResponse) Reset()         { *m = QueryAuctionPeriodResponse{} }
func (m *QueryAuctionPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionPeriodResponse) ProtoMessage()    {}
func (*QueryAuctionPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{3}
}
func (m *QueryAuctionPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionPeriodResponse.Merge(m, src)
}
func (m *QueryAuctionPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionPeriodResponse proto.InternalMessageInfo

func (m *QueryAuctionPeriodResponse) GetAuctionPeriod() *AuctionPeriod {
	if m != nil {
		return m.AuctionPeriod
	}
	return nil
}

type QueryAuctionsRequest struct {
}

func (m *QueryAuctionsRequest) Reset()         { *m = QueryAuctionsRequest{} }
func (m *QueryAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsRequest) ProtoMessage()    {}
func (*QueryAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{4}
}
func (m *QueryAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsRequest.Merge(m, src)
}
func (m *QueryAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsRequest proto.InternalMessageInfo

type QueryAuctionsResponse struct {
	Auctions []Auction `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions"`
}

func (m *QueryAuctionsResponse) Reset()         { *m = QueryAuctionsResponse{} }
func (m *QueryAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsResponse) ProtoMessage()    {}
func (*QueryAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{5}
}
func (m *QueryAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsResponse.Merge(m, src)
}
func (m *QueryAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsResponse proto.InternalMessageInfo

func (m *QueryAuctionsResponse) GetAuctions() []Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

type QueryAuctionByIdRequest struct {
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *QueryAuctionByIdRequest) Reset()         { *m = QueryAuctionByIdRequest{} }
func (m *QueryAuctionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionByIdRequest) ProtoMessage()    {}
func (*QueryAuctionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{6}
}
func (m *QueryAuctionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionByIdRequest.Merge(m, src)
}
func (m *QueryAuctionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionByIdRequest proto.InternalMessageInfo

func (m *QueryAuctionByIdRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

type QueryAuctionByIdResponse struct {
	Auction *Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
}

func (m *QueryAuctionByIdResponse) Reset()         { *m = QueryAuctionByIdResponse{} }
func (m *QueryAuctionByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionByIdResponse) ProtoMessage()    {}
func (*QueryAuctionByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{7}
}
func (m *QueryAuctionByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionByIdResponse.Merge(m, src)
}
func (m *QueryAuctionByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionByIdResponse proto.InternalMessageInfo

func (m *QueryAuctionByIdResponse) GetAuction() *Auction {
	if m != nil {
		return m.Auction
	}
	return nil
}

type QueryAuctionByDenomRequest struct {
	AuctionDenom string `protobuf:"bytes,1,opt,name=auction_denom,json=auctionDenom,proto3" json:"auction_denom,omitempty"`
}

func (m *QueryAuctionByDenomRequest) Reset()         { *m = QueryAuctionByDenomRequest{} }
func (m *QueryAuctionByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionByDenomRequest) ProtoMessage()    {}
func (*QueryAuctionByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{8}
}
func (m *QueryAuctionByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionByDenomRequest.Merge(m, src)
}
func (m *QueryAuctionByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionByDenomRequest proto.InternalMessageInfo

func (m *QueryAuctionByDenomRequest) GetAuctionDenom() string {
	if m != nil {
		return m.AuctionDenom
	}
	return ""
}

type QueryAuctionByDenomResponse struct {
	Auction *Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
}

func (m *QueryAuctionByDenomResponse) Reset()         { *m = QueryAuctionByDenomResponse{} }
func (m *QueryAuctionByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionByDenomResponse) ProtoMessage()    {}
func (*QueryAuctionByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{9}
}
func (m *QueryAuctionByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionByDenomResponse.Merge(m, src)
}
func (m *QueryAuctionByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionByDenomResponse proto.InternalMessageInfo

func (m *QueryAuctionByDenomResponse) GetAuction() *Auction {
	if m != nil {
		return m.Auction
	}
	return nil
}

type QueryAllAuctionsByBidderRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAllAuctionsByBidderRequest) Reset()         { *m = QueryAllAuctionsByBidderRequest{} }
func (m *QueryAllAuctionsByBidderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuctionsByBidderRequest) ProtoMessage()    {}
func (*QueryAllAuctionsByBidderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{10}
}
func (m *QueryAllAuctionsByBidderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuctionsByBidderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuctionsByBidderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuctionsByBidderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuctionsByBidderRequest.Merge(m, src)
}
func (m *QueryAllAuctionsByBidderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuctionsByBidderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuctionsByBidderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuctionsByBidderRequest proto.InternalMessageInfo

func (m *QueryAllAuctionsByBidderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAllAuctionsByBidderResponse struct {
	Auctions []Auction `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions"`
}

func (m *QueryAllAuctionsByBidderResponse) Reset()         { *m = QueryAllAuctionsByBidderResponse{} }
func (m *QueryAllAuctionsByBidderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuctionsByBidderResponse) ProtoMessage()    {}
func (*QueryAllAuctionsByBidderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{11}
}
func (m *QueryAllAuctionsByBidderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuctionsByBidderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuctionsByBidderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuctionsByBidderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuctionsByBidderResponse.Merge(m, src)
}
func (m *QueryAllAuctionsByBidderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuctionsByBidderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuctionsByBidderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuctionsByBidderResponse proto.InternalMessageInfo

func (m *QueryAllAuctionsByBidderResponse) GetAuctions() []Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

type QueryAuctionPoolRequest struct {
}

func (m *QueryAuctionPoolRequest) Reset()         { *m = QueryAuctionPoolRequest{} }
func (m *QueryAuctionPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionPoolRequest) ProtoMessage()    {}
func (*QueryAuctionPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{12}
}
func (m *QueryAuctionPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionPoolRequest.Merge(m, src)
}
func (m *QueryAuctionPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionPoolRequest proto.InternalMessageInfo

type QueryAuctionPoolResponse struct {
	Account  string       `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Balances []types.Coin `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances"`
}

func (m *QueryAuctionPoolResponse) Reset()         { *m = QueryAuctionPoolResponse{} }
func (m *QueryAuctionPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionPoolResponse) ProtoMessage()    {}
func (*QueryAuctionPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c48d70714d6628, []int{13}
}
func (m *QueryAuctionPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionPoolResponse.Merge(m, src)
}
func (m *QueryAuctionPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionPoolResponse proto.InternalMessageInfo

func (m *QueryAuctionPoolResponse) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *QueryAuctionPoolResponse) GetBalances() []types.Coin {
	if m != nil {
		return m.Balances
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "auction.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "auction.v1.QueryParamsResponse")
	proto.RegisterType((*QueryAuctionPeriodRequest)(nil), "auction.v1.QueryAuctionPeriodRequest")
	proto.RegisterType((*QueryAuctionPeriodResponse)(nil), "auction.v1.QueryAuctionPeriodResponse")
	proto.RegisterType((*QueryAuctionsRequest)(nil), "auction.v1.QueryAuctionsRequest")
	proto.RegisterType((*QueryAuctionsResponse)(nil), "auction.v1.QueryAuctionsResponse")
	proto.RegisterType((*QueryAuctionByIdRequest)(nil), "auction.v1.QueryAuctionByIdRequest")
	proto.RegisterType((*QueryAuctionByIdResponse)(nil), "auction.v1.QueryAuctionByIdResponse")
	proto.RegisterType((*QueryAuctionByDenomRequest)(nil), "auction.v1.QueryAuctionByDenomRequest")
	proto.RegisterType((*QueryAuctionByDenomResponse)(nil), "auction.v1.QueryAuctionByDenomResponse")
	proto.RegisterType((*QueryAllAuctionsByBidderRequest)(nil), "auction.v1.QueryAllAuctionsByBidderRequest")
	proto.RegisterType((*QueryAllAuctionsByBidderResponse)(nil), "auction.v1.QueryAllAuctionsByBidderResponse")
	proto.RegisterType((*QueryAuctionPoolRequest)(nil), "auction.v1.QueryAuctionPoolRequest")
	proto.RegisterType((*QueryAuctionPoolResponse)(nil), "auction.v1.QueryAuctionPoolResponse")
}

func init() { proto.RegisterFile("auction/v1/query.proto", fileDescriptor_73c48d70714d6628) }

var fileDescriptor_73c48d70714d6628 = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0x8d, 0x79, 0x3c, 0x3e, 0x2e, 0x0f, 0x16, 0x03, 0x0f, 0x1c, 0x43, 0x4d, 0x6a, 0x28, 0x1f,
	0xa2, 0xf1, 0x34, 0x54, 0x48, 0x95, 0x58, 0xb4, 0xb8, 0x95, 0x10, 0x52, 0x55, 0xd1, 0xec, 0xe8,
	0xa2, 0xc8, 0xb1, 0x47, 0xa9, 0x25, 0xc7, 0xe3, 0xd8, 0x4e, 0xd4, 0x08, 0xc1, 0xa2, 0xbb, 0xee,
	0x2a, 0x75, 0xd3, 0x7d, 0xff, 0x41, 0x7f, 0x05, 0x4b, 0xa4, 0x6e, 0xba, 0xaa, 0x2a, 0xe8, 0x0f,
	0xa9, 0x3c, 0x9e, 0x71, 0x6c, 0x12, 0x43, 0xd5, 0xee, 0x32, 0xf7, 0x9e, 0x7b, 0xcf, 0xb9, 0x73,
	0x73, 0xc6, 0x30, 0x6f, 0x76, 0xac, 0xc8, 0xa1, 0x1e, 0xee, 0xd6, 0x70, 0xbb, 0x43, 0x82, 0x9e,
	0xee, 0x07, 0x34, 0xa2, 0x08, 0x78, 0x5c, 0xef, 0xd6, 0x94, 0xb9, 0x26, 0x6d, 0x52, 0x16, 0xc6,
	0xf1, 0xaf, 0x04, 0xa1, 0x2c, 0x64, 0x2a, 0x7d, 0x33, 0x30, 0x5b, 0x21, 0x4f, 0xc8, 0x99, 0x84,
	0xe8, 0x92, 0x64, 0x96, 0x9a, 0x94, 0x36, 0x5d, 0x82, 0x4d, 0xdf, 0xc1, 0xa6, 0xe7, 0xd1, 0xc8,
	0x8c, 0x93, 0xa2, 0x4e, 0xb5, 0x68, 0xd8, 0xa2, 0x21, 0x6e, 0x98, 0x21, 0xc1, 0xdd, 0x5a, 0x83,
	0x44, 0x66, 0x0d, 0x5b, 0xd4, 0xe1, 0xd5, 0xda, 0x1c, 0xa0, 0x97, 0xb1, 0xc2, 0x43, 0x46, 0x56,
	0x27, 0xed, 0x0e, 0x09, 0x23, 0x6d, 0x1f, 0x66, 0x73, 0xd1, 0xd0, 0xa7, 0x5e, 0x48, 0xd0, 0x03,
	0x18, 0x4b, 0x44, 0xc9, 0x52, 0x45, 0xda, 0x98, 0xda, 0x46, 0x7a, 0x7f, 0x20, 0x3d, 0xc1, 0x1a,
	0xa3, 0xe7, 0xdf, 0x97, 0x4b, 0x75, 0x8e, 0xd3, 0x16, 0xa1, 0xcc, 0x1a, 0xed, 0x25, 0xb8, 0x43,
	0x12, 0x38, 0xd4, 0x16, 0x2c, 0xaf, 0x41, 0x19, 0x96, 0xe4, 0x64, 0x4f, 0x60, 0x86, 0x77, 0x3f,
	0xf6, 0x59, 0x86, 0x93, 0x96, 0xb3, 0xa4, 0xf9, 0xd2, 0x69, 0x33, 0x7b, 0xd4, 0xe6, 0x61, 0x2e,
	0xdb, 0x3f, 0x9d, 0xee, 0x05, 0xfc, 0x7f, 0x2d, 0xce, 0x29, 0x77, 0x60, 0x82, 0x77, 0x88, 0x27,
	0xfc, 0x67, 0x63, 0x6a, 0x7b, 0x76, 0x08, 0x19, 0x1f, 0x31, 0x85, 0x6a, 0x8f, 0x60, 0x21, 0xdb,
	0xcf, 0xe8, 0x1d, 0x88, 0x11, 0xd1, 0x1d, 0x10, 0x3b, 0x3f, 0x76, 0x92, 0x01, 0x46, 0xeb, 0x93,
	0x3c, 0x72, 0x60, 0x6b, 0x07, 0x20, 0x0f, 0x56, 0x72, 0x31, 0x55, 0x18, 0xe7, 0x40, 0x3e, 0xf8,
	0x30, 0x2d, 0x75, 0x81, 0xd1, 0xf6, 0xf2, 0x97, 0x69, 0xf4, 0x9e, 0x11, 0x8f, 0xb6, 0x84, 0x8e,
	0x15, 0x10, 0x77, 0x73, 0x6c, 0xc7, 0x71, 0xd6, 0x72, 0xb2, 0xfe, 0x1f, 0x0f, 0x32, 0xac, 0xf6,
	0x1c, 0x16, 0x87, 0xb6, 0xf8, 0x33, 0x41, 0xbb, 0xb0, 0x9c, 0x74, 0x73, 0x5d, 0x71, 0xd1, 0x46,
	0xcf, 0x70, 0x6c, 0x9b, 0x04, 0x42, 0x95, 0x0c, 0xe3, 0xa6, 0x6d, 0x07, 0x24, 0x0c, 0xb9, 0x1e,
	0x71, 0xd4, 0x8e, 0xa0, 0x52, 0x5c, 0xfc, 0x77, 0xdb, 0x2a, 0xe7, 0xb7, 0x75, 0x48, 0xa9, 0x2b,
	0xfe, 0x18, 0xed, 0xfc, 0x3a, 0x92, 0x14, 0x67, 0x8b, 0xb5, 0x5a, 0x16, 0xed, 0x78, 0x51, 0xaa,
	0x35, 0x39, 0xa2, 0x5d, 0x98, 0x68, 0x98, 0xae, 0xe9, 0x59, 0x24, 0x94, 0x47, 0x98, 0x8e, 0xb2,
	0x9e, 0xb8, 0x4e, 0x8f, 0x5d, 0xa7, 0x73, 0xd7, 0xe9, 0x4f, 0xa9, 0x93, 0xaa, 0x11, 0x05, 0xdb,
	0x5f, 0xc6, 0xe1, 0x5f, 0xc6, 0x89, 0x1c, 0x18, 0x4b, 0x2c, 0x84, 0xd4, 0xec, 0x18, 0x83, 0xee,
	0x54, 0x96, 0x0b, 0xf3, 0x89, 0x56, 0x4d, 0x7d, 0xf7, 0xf5, 0xe7, 0xc7, 0x11, 0x19, 0xcd, 0xe3,
	0xfe, 0xab, 0x11, 0x6b, 0xe0, 0x4f, 0x0a, 0x3a, 0x83, 0xe9, 0x9c, 0x71, 0xd0, 0xbd, 0x81, 0x8e,
	0xc3, 0x0c, 0xab, 0xac, 0xdd, 0x06, 0xbb, 0x95, 0x3f, 0xa1, 0x6b, 0xc3, 0x84, 0xd8, 0x2a, 0xaa,
	0x14, 0xf5, 0x4c, 0xc7, 0xbd, 0x7b, 0x03, 0x82, 0x13, 0x56, 0x18, 0xa1, 0x82, 0xe4, 0xeb, 0x84,
	0x62, 0xeb, 0xe8, 0xbd, 0x04, 0x53, 0x19, 0x97, 0xa1, 0x95, 0xa2, 0xa6, 0x19, 0xf7, 0x2a, 0xab,
	0x37, 0x83, 0x38, 0x39, 0x66, 0xe4, 0x9b, 0x68, 0xbd, 0x80, 0xbc, 0xea, 0xd8, 0xf8, 0xa4, 0xff,
	0x0a, 0x9c, 0xa2, 0x4f, 0x12, 0xcc, 0xe4, 0x3d, 0x86, 0xd6, 0x8a, 0x99, 0xb2, 0x3e, 0x56, 0xd6,
	0x6f, 0xc5, 0x71, 0x51, 0x3b, 0x4c, 0x14, 0x46, 0xd5, 0x22, 0x51, 0xec, 0x19, 0xe8, 0xeb, 0x62,
	0xc7, 0x53, 0xf4, 0x59, 0x82, 0xd9, 0x21, 0x9e, 0x43, 0x5b, 0x83, 0xbc, 0x85, 0xb6, 0x56, 0xee,
	0xff, 0x1e, 0x98, 0x2b, 0xad, 0x31, 0xa5, 0x5b, 0x68, 0xb3, 0x68, 0x77, 0xd5, 0x06, 0x2b, 0xc0,
	0x27, 0xfc, 0x71, 0x38, 0x45, 0x67, 0xe9, 0x2e, 0x63, 0x8b, 0x16, 0xef, 0x32, 0xe3, 0xed, 0xe2,
	0x5d, 0x66, 0x5d, 0xae, 0xad, 0x32, 0x31, 0x2a, 0x5a, 0x2a, 0xba, 0x36, 0x9f, 0x52, 0xd7, 0x38,
	0x3a, 0xbf, 0x54, 0xa5, 0x8b, 0x4b, 0x55, 0xfa, 0x71, 0xa9, 0x4a, 0x1f, 0xae, 0xd4, 0xd2, 0xc5,
	0x95, 0x5a, 0xfa, 0x76, 0xa5, 0x96, 0x5e, 0x3d, 0x6e, 0x3a, 0xd1, 0x9b, 0x4e, 0x43, 0xb7, 0x68,
	0x0b, 0xef, 0x07, 0x66, 0xd7, 0x89, 0x7a, 0x55, 0x23, 0x70, 0xec, 0x26, 0xb9, 0x7e, 0x6c, 0x51,
	0xbb, 0xe3, 0x12, 0xfc, 0x36, 0x25, 0x8a, 0x7a, 0x3e, 0x09, 0x1b, 0x63, 0xec, 0xb3, 0xfc, 0xf0,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xd4, 0x3c, 0x06, 0x43, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the current module parameters (decided by governance)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AuctionPeriod returns the current active auction period, or a future one if no period is active
	AuctionPeriod(ctx context.Context, in *QueryAuctionPeriodRequest, opts ...grpc.CallOption) (*QueryAuctionPeriodResponse, error)
	// Auctions returns all current active auctions
	Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error)
	// AuctionById returns an open auction given by its `id`
	AuctionById(ctx context.Context, in *QueryAuctionByIdRequest, opts ...grpc.CallOption) (*QueryAuctionByIdResponse, error)
	// AuctionByDenom returns an open auction given by its `denom`
	AuctionByDenom(ctx context.Context, in *QueryAuctionByDenomRequest, opts ...grpc.CallOption) (*QueryAuctionByDenomResponse, error)
	// AllAuctionsByBidder returns all open auctions with the given highest bidder address
	AllAuctionsByBidder(ctx context.Context, in *QueryAllAuctionsByBidderRequest, opts ...grpc.CallOption) (*QueryAllAuctionsByBidderResponse, error)
	// AuctionPool returns the auction pool account address and the tokens which will be up for auction next,
	// (but does not return any amounts from auctions with no bidder)
	AuctionPool(ctx context.Context, in *QueryAuctionPoolRequest, opts ...grpc.CallOption) (*QueryAuctionPoolResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionPeriod(ctx context.Context, in *QueryAuctionPeriodRequest, opts ...grpc.CallOption) (*QueryAuctionPeriodResponse, error) {
	out := new(QueryAuctionPeriodResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/AuctionPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error) {
	out := new(QueryAuctionsResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/Auctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionById(ctx context.Context, in *QueryAuctionByIdRequest, opts ...grpc.CallOption) (*QueryAuctionByIdResponse, error) {
	out := new(QueryAuctionByIdResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/AuctionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionByDenom(ctx context.Context, in *QueryAuctionByDenomRequest, opts ...grpc.CallOption) (*QueryAuctionByDenomResponse, error) {
	out := new(QueryAuctionByDenomResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/AuctionByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllAuctionsByBidder(ctx context.Context, in *QueryAllAuctionsByBidderRequest, opts ...grpc.CallOption) (*QueryAllAuctionsByBidderResponse, error) {
	out := new(QueryAllAuctionsByBidderResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/AllAuctionsByBidder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionPool(ctx context.Context, in *QueryAuctionPoolRequest, opts ...grpc.CallOption) (*QueryAuctionPoolResponse, error) {
	out := new(QueryAuctionPoolResponse)
	err := c.cc.Invoke(ctx, "/auction.v1.Query/AuctionPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the current module parameters (decided by governance)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AuctionPeriod returns the current active auction period, or a future one if no period is active
	AuctionPeriod(context.Context, *QueryAuctionPeriodRequest) (*QueryAuctionPeriodResponse, error)
	// Auctions returns all current active auctions
	Auctions(context.Context, *QueryAuctionsRequest) (*QueryAuctionsResponse, error)
	// AuctionById returns an open auction given by its `id`
	AuctionById(context.Context, *QueryAuctionByIdRequest) (*QueryAuctionByIdResponse, error)
	// AuctionByDenom returns an open auction given by its `denom`
	AuctionByDenom(context.Context, *QueryAuctionByDenomRequest) (*QueryAuctionByDenomResponse, error)
	// AllAuctionsByBidder returns all open auctions with the given highest bidder address
	AllAuctionsByBidder(context.Context, *QueryAllAuctionsByBidderRequest) (*QueryAllAuctionsByBidderResponse, error)
	// AuctionPool returns the auction pool account address and the tokens which will be up for auction next,
	// (but does not return any amounts from auctions with no bidder)
	AuctionPool(context.Context, *QueryAuctionPoolRequest) (*QueryAuctionPoolResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AuctionPeriod(ctx context.Context, req *QueryAuctionPeriodRequest) (*QueryAuctionPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionPeriod not implemented")
}
func (*UnimplementedQueryServer) Auctions(ctx context.Context, req *QueryAuctionsRequest) (*QueryAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auctions not implemented")
}
func (*UnimplementedQueryServer) AuctionById(ctx context.Context, req *QueryAuctionByIdRequest) (*QueryAuctionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionById not implemented")
}
func (*UnimplementedQueryServer) AuctionByDenom(ctx context.Context, req *QueryAuctionByDenomRequest) (*QueryAuctionByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionByDenom not implemented")
}
func (*UnimplementedQueryServer) AllAuctionsByBidder(ctx context.Context, req *QueryAllAuctionsByBidderRequest) (*QueryAllAuctionsByBidderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAuctionsByBidder not implemented")
}
func (*UnimplementedQueryServer) AuctionPool(ctx context.Context, req *QueryAuctionPoolRequest) (*QueryAuctionPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionPool not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/AuctionPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionPeriod(ctx, req.(*QueryAuctionPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Auctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Auctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/Auctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Auctions(ctx, req.(*QueryAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/AuctionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionById(ctx, req.(*QueryAuctionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/AuctionByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionByDenom(ctx, req.(*QueryAuctionByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllAuctionsByBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAuctionsByBidderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllAuctionsByBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/AllAuctionsByBidder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllAuctionsByBidder(ctx, req.(*QueryAllAuctionsByBidderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.v1.Query/AuctionPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionPool(ctx, req.(*QueryAuctionPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auction.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AuctionPeriod",
			Handler:    _Query_AuctionPeriod_Handler,
		},
		{
			MethodName: "Auctions",
			Handler:    _Query_Auctions_Handler,
		},
		{
			MethodName: "AuctionById",
			Handler:    _Query_AuctionById_Handler,
		},
		{
			MethodName: "AuctionByDenom",
			Handler:    _Query_AuctionByDenom_Handler,
		},
		{
			MethodName: "AllAuctionsByBidder",
			Handler:    _Query_AllAuctionsByBidder_Handler,
		},
		{
			MethodName: "AuctionPool",
			Handler:    _Query_AuctionPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auction/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAuctionPeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionPeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionPeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAuctionPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionPeriod != nil {
		{
			size, err := m.AuctionPeriod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auction != nil {
		{
			size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuctionDenom) > 0 {
		i -= len(m.AuctionDenom)
		copy(dAtA[i:], m.AuctionDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AuctionDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auction != nil {
		{
			size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAuctionsByBidderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuctionsByBidderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuctionsByBidderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAuctionsByBidderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuctionsByBidderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuctionsByBidderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAuctionPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAuctionPeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAuctionPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionPeriod != nil {
		l = m.AuctionPeriod.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAuctionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	return n
}

func (m *QueryAuctionByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auction != nil {
		l = m.Auction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuctionDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auction != nil {
		l = m.Auction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAuctionsByBidderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAuctionsByBidderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAuctionPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAuctionPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionPeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionPeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionPeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuctionPeriod == nil {
				m.AuctionPeriod = &AuctionPeriod{}
			}
			if err := m.AuctionPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auction == nil {
				m.Auction = &Auction{}
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auction == nil {
				m.Auction = &Auction{}
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuctionsByBidderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuctionsByBidderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuctionsByBidderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuctionsByBidderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuctionsByBidderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuctionsByBidderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, types.Coin{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
