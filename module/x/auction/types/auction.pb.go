// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/v1/auction.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionStatus represents the status of an Auction.
// An Auction can be either in progress or finished.
type AuctionStatus int32

const (
	// The Auction status is unspecified. Probaly haven't started yet.
	AuctionStatus_AUCTION_STATUS_UNSPECIFIED AuctionStatus = 0
	// The Auction is still ongoing.
	AuctionStatus_AUCTION_STATUS_IN_PROGRESS AuctionStatus = 1
	// The Auction has ended.
	AuctionStatus_AUCTION_STATUS_FINISH AuctionStatus = 2
)

var AuctionStatus_name = map[int32]string{
	0: "AUCTION_STATUS_UNSPECIFIED",
	1: "AUCTION_STATUS_IN_PROGRESS",
	2: "AUCTION_STATUS_FINISH",
}

var AuctionStatus_value = map[string]int32{
	"AUCTION_STATUS_UNSPECIFIED": 0,
	"AUCTION_STATUS_IN_PROGRESS": 1,
	"AUCTION_STATUS_FINISH":      2,
}

func (x AuctionStatus) String() string {
	return proto.EnumName(AuctionStatus_name, int32(x))
}

func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{0}
}

// AuctionPeriod represents a period of auctions.
// Each AuctionPeriod has a unique identifier and a starting block height.
// An AuctionPeriod can have multiple Auctions.
type AuctionPeriod struct {
	StartBlockHeight uint64 `protobuf:"varint,1,opt,name=start_block_height,json=startBlockHeight,proto3" json:"start_block_height,omitempty"`
	EndBlockHeight   uint64 `protobuf:"varint,2,opt,name=end_block_height,json=endBlockHeight,proto3" json:"end_block_height,omitempty"`
}

func (m *AuctionPeriod) Reset()         { *m = AuctionPeriod{} }
func (m *AuctionPeriod) String() string { return proto.CompactTextString(m) }
func (*AuctionPeriod) ProtoMessage()    {}
func (*AuctionPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{0}
}
func (m *AuctionPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionPeriod.Merge(m, src)
}
func (m *AuctionPeriod) XXX_Size() int {
	return m.Size()
}
func (m *AuctionPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionPeriod proto.InternalMessageInfo

func (m *AuctionPeriod) GetStartBlockHeight() uint64 {
	if m != nil {
		return m.StartBlockHeight
	}
	return 0
}

func (m *AuctionPeriod) GetEndBlockHeight() uint64 {
	if m != nil {
		return m.EndBlockHeight
	}
	return 0
}

// Auction represents a single auction.
// An Auction has a unique identifier relative to its Auction Period Id , an amount being auctioned, a status, and a highest bid.
type Auction struct {
	Id              uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AuctionAmount   types.Coin    `protobuf:"bytes,2,opt,name=auction_amount,json=auctionAmount,proto3" json:"auction_amount"`
	Status          AuctionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=auction.v1.AuctionStatus" json:"status,omitempty"`
	HighestBid      *Bid          `protobuf:"bytes,4,opt,name=highest_bid,json=highestBid,proto3" json:"highest_bid,omitempty"`
	AuctionPeriodId uint64        `protobuf:"varint,5,opt,name=auction_period_id,json=auctionPeriodId,proto3" json:"auction_period_id,omitempty"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{1}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

func (m *Auction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Auction) GetAuctionAmount() types.Coin {
	if m != nil {
		return m.AuctionAmount
	}
	return types.Coin{}
}

func (m *Auction) GetStatus() AuctionStatus {
	if m != nil {
		return m.Status
	}
	return AuctionStatus_AUCTION_STATUS_UNSPECIFIED
}

func (m *Auction) GetHighestBid() *Bid {
	if m != nil {
		return m.HighestBid
	}
	return nil
}

func (m *Auction) GetAuctionPeriodId() uint64 {
	if m != nil {
		return m.AuctionPeriodId
	}
	return 0
}

// Bid represents a bid on an Auction.
// A Bid includes the identifier of the Auction, the amount of the bid, and the address of the bidder.
type Bid struct {
	AuctionId     uint64     `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	BidAmount     types.Coin `protobuf:"bytes,2,opt,name=bid_amount,json=bidAmount,proto3" json:"bid_amount"`
	BidderAddress string     `protobuf:"bytes,3,opt,name=bidder_address,json=bidderAddress,proto3" json:"bidder_address,omitempty"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{2}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Bid) GetBidAmount() types.Coin {
	if m != nil {
		return m.BidAmount
	}
	return types.Coin{}
}

func (m *Bid) GetBidderAddress() string {
	if m != nil {
		return m.BidderAddress
	}
	return ""
}

// Estimate the block height of the next auction period
type EstimateNextAuctionPeriodHeight struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *EstimateNextAuctionPeriodHeight) Reset()         { *m = EstimateNextAuctionPeriodHeight{} }
func (m *EstimateNextAuctionPeriodHeight) String() string { return proto.CompactTextString(m) }
func (*EstimateNextAuctionPeriodHeight) ProtoMessage()    {}
func (*EstimateNextAuctionPeriodHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe336ece9e41ddd, []int{3}
}
func (m *EstimateNextAuctionPeriodHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateNextAuctionPeriodHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateNextAuctionPeriodHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateNextAuctionPeriodHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateNextAuctionPeriodHeight.Merge(m, src)
}
func (m *EstimateNextAuctionPeriodHeight) XXX_Size() int {
	return m.Size()
}
func (m *EstimateNextAuctionPeriodHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateNextAuctionPeriodHeight.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateNextAuctionPeriodHeight proto.InternalMessageInfo

func (m *EstimateNextAuctionPeriodHeight) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterEnum("auction.v1.AuctionStatus", AuctionStatus_name, AuctionStatus_value)
	proto.RegisterType((*AuctionPeriod)(nil), "auction.v1.AuctionPeriod")
	proto.RegisterType((*Auction)(nil), "auction.v1.Auction")
	proto.RegisterType((*Bid)(nil), "auction.v1.Bid")
	proto.RegisterType((*EstimateNextAuctionPeriodHeight)(nil), "auction.v1.EstimateNextAuctionPeriodHeight")
}

func init() { proto.RegisterFile("auction/v1/auction.proto", fileDescriptor_efe336ece9e41ddd) }

var fileDescriptor_efe336ece9e41ddd = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0xc7, 0x31, 0xa1, 0x54, 0x4c, 0x04, 0xa1, 0xab, 0xb6, 0x02, 0xa4, 0x3a, 0x11, 0x52, 0x25,
	0x14, 0xb5, 0x76, 0x49, 0x4f, 0xbd, 0xb4, 0xc2, 0x14, 0x12, 0x5f, 0x08, 0xb2, 0xe1, 0xd0, 0x5e,
	0x56, 0x6b, 0x76, 0x65, 0xb6, 0x0d, 0x2c, 0xf2, 0xae, 0x51, 0xf2, 0x0c, 0xbd, 0xf4, 0xb1, 0x72,
	0xcc, 0xb1, 0xa7, 0xaa, 0x82, 0x37, 0xe8, 0x13, 0x54, 0xac, 0x97, 0x14, 0xa2, 0x5e, 0x7a, 0x9b,
	0x8f, 0xff, 0xcc, 0xf8, 0x37, 0xb3, 0x86, 0x1a, 0x49, 0x27, 0x8a, 0x8b, 0xb9, 0xbb, 0x6c, 0xbb,
	0xc6, 0x74, 0x16, 0x89, 0x50, 0x02, 0xc1, 0xd6, 0x5d, 0xb6, 0x1b, 0xf6, 0x44, 0xc8, 0x99, 0x90,
	0x6e, 0x44, 0x24, 0x73, 0x97, 0xed, 0x88, 0x29, 0xd2, 0x76, 0x27, 0x82, 0x1b, 0x6d, 0xe3, 0x69,
	0x2c, 0x62, 0xa1, 0x4d, 0x77, 0x63, 0x65, 0xd1, 0x66, 0x0c, 0xe5, 0x4e, 0xd6, 0x63, 0xc8, 0x12,
	0x2e, 0x28, 0x7a, 0x05, 0x48, 0x2a, 0x92, 0x28, 0x1c, 0x5d, 0x89, 0xc9, 0x57, 0x3c, 0x65, 0x3c,
	0x9e, 0xaa, 0x9a, 0x75, 0x62, 0xb5, 0x0a, 0x41, 0x55, 0x67, 0xbc, 0x4d, 0xe2, 0x42, 0xc7, 0x51,
	0x0b, 0xaa, 0x6c, 0x4e, 0xf7, 0xb5, 0x79, 0xad, 0xad, 0xb0, 0x39, 0xdd, 0x51, 0x36, 0x7f, 0x5b,
	0xf0, 0xd8, 0x4c, 0x42, 0x15, 0xc8, 0x73, 0x6a, 0x7a, 0xe6, 0x39, 0x45, 0x7d, 0xa8, 0x18, 0x10,
	0x4c, 0x66, 0x22, 0x9d, 0x67, 0x3d, 0x0e, 0xcf, 0xea, 0x4e, 0xc6, 0xe4, 0x6c, 0x98, 0x1c, 0xc3,
	0xe4, 0x74, 0x05, 0x9f, 0x7b, 0x85, 0xdb, 0x9f, 0xc7, 0xb9, 0xa0, 0x6c, 0xca, 0x3a, 0xba, 0x0a,
	0xb5, 0xa1, 0x28, 0x15, 0x51, 0xa9, 0xac, 0x1d, 0x9c, 0x58, 0xad, 0xca, 0x59, 0xdd, 0xf9, 0xbb,
	0x1f, 0xc7, 0x0c, 0x0f, 0xb5, 0x20, 0x30, 0x42, 0xf4, 0x06, 0x0e, 0xa7, 0x3c, 0x9e, 0x32, 0xa9,
	0x70, 0xc4, 0x69, 0xad, 0xa0, 0xe7, 0x1e, 0xed, 0xd6, 0x79, 0x9c, 0x06, 0x60, 0x34, 0x1e, 0xa7,
	0xe8, 0x14, 0x9e, 0x6c, 0x3f, 0x76, 0xa1, 0x57, 0x86, 0x39, 0xad, 0x3d, 0xd2, 0x2c, 0x47, 0x64,
	0x77, 0x95, 0x3e, 0x6d, 0x7e, 0xb3, 0xe0, 0x60, 0x53, 0xf3, 0x02, 0xb6, 0x97, 0xc2, 0xf7, 0xe0,
	0x25, 0x13, 0xf1, 0x29, 0x7a, 0x0f, 0x10, 0x71, 0xfa, 0x9f, 0xec, 0xa5, 0x88, 0x53, 0xc3, 0xfd,
	0x12, 0x2a, 0x11, 0xa7, 0x94, 0x25, 0x98, 0x50, 0x9a, 0x30, 0x99, 0xf1, 0x97, 0x82, 0x72, 0x16,
	0xed, 0x64, 0xc1, 0xe6, 0x3b, 0x38, 0xee, 0x49, 0xc5, 0x67, 0x44, 0xb1, 0x01, 0xbb, 0x56, 0x7b,
	0x77, 0x37, 0xf7, 0x7c, 0x0e, 0xc5, 0xbd, 0x8b, 0x1b, 0xef, 0xf4, 0xcb, 0xfd, 0x33, 0xc9, 0xf6,
	0x87, 0x6c, 0x68, 0x74, 0xc6, 0xdd, 0x91, 0x7f, 0x39, 0xc0, 0xe1, 0xa8, 0x33, 0x1a, 0x87, 0x78,
	0x3c, 0x08, 0x87, 0xbd, 0xae, 0xdf, 0xf7, 0x7b, 0x1f, 0xab, 0xb9, 0x7f, 0xe4, 0xfd, 0x01, 0x1e,
	0x06, 0x97, 0xe7, 0x41, 0x2f, 0x0c, 0xab, 0x16, 0xaa, 0xc3, 0xb3, 0x07, 0xf9, 0xbe, 0x3f, 0xf0,
	0xc3, 0x8b, 0x6a, 0xde, 0xfb, 0x74, 0xbb, 0xb2, 0xad, 0xbb, 0x95, 0x6d, 0xfd, 0x5a, 0xd9, 0xd6,
	0xf7, 0xb5, 0x9d, 0xbb, 0x5b, 0xdb, 0xb9, 0x1f, 0x6b, 0x3b, 0xf7, 0xf9, 0x43, 0xcc, 0xd5, 0x34,
	0x8d, 0x9c, 0x89, 0x98, 0xb9, 0xe7, 0x09, 0x59, 0x72, 0x75, 0xf3, 0xda, 0x4b, 0x38, 0x8d, 0xd9,
	0x43, 0x77, 0x26, 0x68, 0x7a, 0xc5, 0xdc, 0xeb, 0xed, 0xff, 0xe2, 0xaa, 0x9b, 0x05, 0x93, 0x51,
	0x51, 0x3f, 0xfa, 0xb7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xaf, 0x26, 0x15, 0x52, 0x03,
	0x00, 0x00,
}

func (m *AuctionPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlockHeight != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.EndBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.StartBlockHeight != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.StartBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionPeriodId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionPeriodId))
		i--
		dAtA[i] = 0x28
	}
	if m.HighestBid != nil {
		{
			size, err := m.HighestBid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.AuctionAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidderAddress) > 0 {
		i -= len(m.BidderAddress)
		copy(dAtA[i:], m.BidderAddress)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.BidderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.BidAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EstimateNextAuctionPeriodHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateNextAuctionPeriodHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateNextAuctionPeriodHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuctionPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartBlockHeight != 0 {
		n += 1 + sovAuction(uint64(m.StartBlockHeight))
	}
	if m.EndBlockHeight != 0 {
		n += 1 + sovAuction(uint64(m.EndBlockHeight))
	}
	return n
}

func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	l = m.AuctionAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.Status != 0 {
		n += 1 + sovAuction(uint64(m.Status))
	}
	if m.HighestBid != nil {
		l = m.HighestBid.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	if m.AuctionPeriodId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionPeriodId))
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = m.BidAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = len(m.BidderAddress)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func (m *EstimateNextAuctionPeriodHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovAuction(uint64(m.Height))
	}
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuctionPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockHeight", wireType)
			}
			m.StartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockHeight", wireType)
			}
			m.EndBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuctionAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuctionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HighestBid == nil {
				m.HighestBid = &Bid{}
			}
			if err := m.HighestBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionPeriodId", wireType)
			}
			m.AuctionPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateNextAuctionPeriodHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateNextAuctionPeriodHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateNextAuctionPeriodHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
