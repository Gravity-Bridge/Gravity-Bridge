// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/v1/params.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the GravityBridge auction module.
type Params struct {
	// AuctionLength is the number of blocks that the AuctionPeriod will be active
	AuctionLength uint64 `protobuf:"varint,1,opt,name=auction_length,json=auctionLength,proto3" json:"auction_length,omitempty"`
	// MinBidFee defines the required minimum fee that must be paid by bidders for their bid to be considered by the module.
	// This fee is paid out to the auction pool. This fee is separate from the standard Cosmos Tx spam protection fee.
	// This fee will not be charged unless a bid is successful.
	MinBidFee uint64 `protobuf:"varint,2,opt,name=min_bid_fee,json=minBidFee,proto3" json:"min_bid_fee,omitempty"`
	// NonAuctionableTokens is a list of token denomss which should never be auctioned from the auction pool
	NonAuctionableTokens []string `protobuf:"bytes,3,rep,name=non_auctionable_tokens,json=nonAuctionableTokens,proto3" json:"non_auctionable_tokens,omitempty"`
	// BurnWinningBids controls if we burn the tokens of the winning bidder instead of sending them to the auction pool
	BurnWinningBids bool `protobuf:"varint,4,opt,name=burn_winning_bids,json=burnWinningBids,proto3" json:"burn_winning_bids,omitempty"`
	// Enabled controls whether auctions progress as usual, or are preserved in an inactive halted state.
	// When Enabled is false, bids will also fail to be processed.
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa896080af719c96, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAuctionLength() uint64 {
	if m != nil {
		return m.AuctionLength
	}
	return 0
}

func (m *Params) GetMinBidFee() uint64 {
	if m != nil {
		return m.MinBidFee
	}
	return 0
}

func (m *Params) GetNonAuctionableTokens() []string {
	if m != nil {
		return m.NonAuctionableTokens
	}
	return nil
}

func (m *Params) GetBurnWinningBids() bool {
	if m != nil {
		return m.BurnWinningBids
	}
	return false
}

func (m *Params) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "auction.v1.Params")
}

func init() { proto.RegisterFile("auction/v1/params.proto", fileDescriptor_aa896080af719c96) }

var fileDescriptor_aa896080af719c96 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0x1b, 0x37, 0xa7, 0x8b, 0xa8, 0x18, 0x44, 0x73, 0x0a, 0x45, 0x10, 0x8a, 0x60, 0xcb,
	0xd0, 0xbb, 0xd8, 0x83, 0x5e, 0x3c, 0x48, 0x11, 0x44, 0x2f, 0xa1, 0x5d, 0x62, 0x17, 0x6c, 0xbf,
	0x94, 0x36, 0xad, 0xee, 0x5f, 0xf8, 0xb3, 0x04, 0x2f, 0x3b, 0x7a, 0x94, 0xf6, 0x8f, 0xc8, 0x62,
	0x87, 0xb0, 0xe3, 0xf7, 0x3c, 0xef, 0xfb, 0x1d, 0x5e, 0x7c, 0x1c, 0xd7, 0x53, 0xa3, 0x34, 0x04,
	0xcd, 0x24, 0x28, 0xe2, 0x32, 0xce, 0x2b, 0xbf, 0x28, 0xb5, 0xd1, 0x04, 0xf7, 0xc2, 0x6f, 0x26,
	0x27, 0x5f, 0x08, 0x8f, 0xee, 0xad, 0x24, 0xa7, 0x78, 0xaf, 0x17, 0x3c, 0x93, 0x90, 0x9a, 0x19,
	0x45, 0x2e, 0xf2, 0x86, 0xd1, 0x6e, 0x4f, 0xef, 0x2c, 0x24, 0x0c, 0xef, 0xe4, 0x0a, 0x78, 0xa2,
	0x04, 0x7f, 0x91, 0x92, 0x6e, 0xd8, 0xcc, 0x38, 0x57, 0x10, 0x2a, 0x71, 0x23, 0x25, 0xb9, 0xc4,
	0x47, 0xa0, 0x81, 0xf7, 0xa5, 0x38, 0xc9, 0x24, 0x37, 0xfa, 0x55, 0x42, 0x45, 0x07, 0xee, 0xc0,
	0x1b, 0x47, 0x87, 0xa0, 0xe1, 0xfa, 0x5f, 0x3e, 0x58, 0x47, 0xce, 0xf0, 0x41, 0x52, 0x97, 0xc0,
	0xdf, 0x14, 0x80, 0x82, 0x74, 0xf9, 0xbe, 0xa2, 0x43, 0x17, 0x79, 0xdb, 0xd1, 0xfe, 0x52, 0x3c,
	0xfe, 0xf1, 0x50, 0x89, 0x8a, 0x50, 0xbc, 0x25, 0x6d, 0x57, 0xd0, 0x4d, 0x9b, 0x58, 0x9d, 0xe1,
	0xd3, 0x67, 0xcb, 0xd0, 0xa2, 0x65, 0xe8, 0xa7, 0x65, 0xe8, 0xa3, 0x63, 0xce, 0xa2, 0x63, 0xce,
	0x77, 0xc7, 0x9c, 0xe7, 0xab, 0x54, 0x99, 0x59, 0x9d, 0xf8, 0x53, 0x9d, 0x07, 0xb7, 0x65, 0xdc,
	0x28, 0x33, 0x3f, 0x0f, 0x4b, 0x25, 0x52, 0xb9, 0x7e, 0xe6, 0x5a, 0xd4, 0x99, 0x0c, 0xde, 0x83,
	0xd5, 0x7c, 0x66, 0x5e, 0xc8, 0x2a, 0x19, 0xd9, 0xed, 0x2e, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xbb, 0x91, 0xb9, 0xa6, 0x56, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BurnWinningBids {
		i--
		if m.BurnWinningBids {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.NonAuctionableTokens) > 0 {
		for iNdEx := len(m.NonAuctionableTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NonAuctionableTokens[iNdEx])
			copy(dAtA[i:], m.NonAuctionableTokens[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.NonAuctionableTokens[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MinBidFee != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinBidFee))
		i--
		dAtA[i] = 0x10
	}
	if m.AuctionLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.AuctionLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionLength != 0 {
		n += 1 + sovParams(uint64(m.AuctionLength))
	}
	if m.MinBidFee != 0 {
		n += 1 + sovParams(uint64(m.MinBidFee))
	}
	if len(m.NonAuctionableTokens) > 0 {
		for _, s := range m.NonAuctionableTokens {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.BurnWinningBids {
		n += 2
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionLength", wireType)
			}
			m.AuctionLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBidFee", wireType)
			}
			m.MinBidFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBidFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonAuctionableTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonAuctionableTokens = append(m.NonAuctionableTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnWinningBids", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnWinningBids = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
